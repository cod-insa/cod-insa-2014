/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package genbridge;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BaseFullData implements org.apache.thrift.TBase<BaseFullData, BaseFullData._Fields>, java.io.Serializable, Cloneable, Comparable<BaseFullData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BaseFullData");

  private static final org.apache.thrift.protocol.TField BASIC_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("basic_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MILITAR_RESSOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("militarRessource", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField FUEL_RESSOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("fuelRessource", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BaseFullDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BaseFullDataTupleSchemeFactory());
  }

  public BaseBasicData basic_info; // required
  public double militarRessource; // required
  public double fuelRessource; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BASIC_INFO((short)1, "basic_info"),
    MILITAR_RESSOURCE((short)2, "militarRessource"),
    FUEL_RESSOURCE((short)3, "fuelRessource");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BASIC_INFO
          return BASIC_INFO;
        case 2: // MILITAR_RESSOURCE
          return MILITAR_RESSOURCE;
        case 3: // FUEL_RESSOURCE
          return FUEL_RESSOURCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MILITARRESSOURCE_ISSET_ID = 0;
  private static final int __FUELRESSOURCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BASIC_INFO, new org.apache.thrift.meta_data.FieldMetaData("basic_info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BaseBasicData.class)));
    tmpMap.put(_Fields.MILITAR_RESSOURCE, new org.apache.thrift.meta_data.FieldMetaData("militarRessource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FUEL_RESSOURCE, new org.apache.thrift.meta_data.FieldMetaData("fuelRessource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BaseFullData.class, metaDataMap);
  }

  public BaseFullData() {
  }

  public BaseFullData(
    BaseBasicData basic_info,
    double militarRessource,
    double fuelRessource)
  {
    this();
    this.basic_info = basic_info;
    this.militarRessource = militarRessource;
    setMilitarRessourceIsSet(true);
    this.fuelRessource = fuelRessource;
    setFuelRessourceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BaseFullData(BaseFullData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBasic_info()) {
      this.basic_info = new BaseBasicData(other.basic_info);
    }
    this.militarRessource = other.militarRessource;
    this.fuelRessource = other.fuelRessource;
  }

  public BaseFullData deepCopy() {
    return new BaseFullData(this);
  }

  @Override
  public void clear() {
    this.basic_info = null;
    setMilitarRessourceIsSet(false);
    this.militarRessource = 0.0;
    setFuelRessourceIsSet(false);
    this.fuelRessource = 0.0;
  }

  public BaseBasicData getBasic_info() {
    return this.basic_info;
  }

  public BaseFullData setBasic_info(BaseBasicData basic_info) {
    this.basic_info = basic_info;
    return this;
  }

  public void unsetBasic_info() {
    this.basic_info = null;
  }

  /** Returns true if field basic_info is set (has been assigned a value) and false otherwise */
  public boolean isSetBasic_info() {
    return this.basic_info != null;
  }

  public void setBasic_infoIsSet(boolean value) {
    if (!value) {
      this.basic_info = null;
    }
  }

  public double getMilitarRessource() {
    return this.militarRessource;
  }

  public BaseFullData setMilitarRessource(double militarRessource) {
    this.militarRessource = militarRessource;
    setMilitarRessourceIsSet(true);
    return this;
  }

  public void unsetMilitarRessource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MILITARRESSOURCE_ISSET_ID);
  }

  /** Returns true if field militarRessource is set (has been assigned a value) and false otherwise */
  public boolean isSetMilitarRessource() {
    return EncodingUtils.testBit(__isset_bitfield, __MILITARRESSOURCE_ISSET_ID);
  }

  public void setMilitarRessourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MILITARRESSOURCE_ISSET_ID, value);
  }

  public double getFuelRessource() {
    return this.fuelRessource;
  }

  public BaseFullData setFuelRessource(double fuelRessource) {
    this.fuelRessource = fuelRessource;
    setFuelRessourceIsSet(true);
    return this;
  }

  public void unsetFuelRessource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUELRESSOURCE_ISSET_ID);
  }

  /** Returns true if field fuelRessource is set (has been assigned a value) and false otherwise */
  public boolean isSetFuelRessource() {
    return EncodingUtils.testBit(__isset_bitfield, __FUELRESSOURCE_ISSET_ID);
  }

  public void setFuelRessourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUELRESSOURCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BASIC_INFO:
      if (value == null) {
        unsetBasic_info();
      } else {
        setBasic_info((BaseBasicData)value);
      }
      break;

    case MILITAR_RESSOURCE:
      if (value == null) {
        unsetMilitarRessource();
      } else {
        setMilitarRessource((Double)value);
      }
      break;

    case FUEL_RESSOURCE:
      if (value == null) {
        unsetFuelRessource();
      } else {
        setFuelRessource((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BASIC_INFO:
      return getBasic_info();

    case MILITAR_RESSOURCE:
      return Double.valueOf(getMilitarRessource());

    case FUEL_RESSOURCE:
      return Double.valueOf(getFuelRessource());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BASIC_INFO:
      return isSetBasic_info();
    case MILITAR_RESSOURCE:
      return isSetMilitarRessource();
    case FUEL_RESSOURCE:
      return isSetFuelRessource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BaseFullData)
      return this.equals((BaseFullData)that);
    return false;
  }

  public boolean equals(BaseFullData that) {
    if (that == null)
      return false;

    boolean this_present_basic_info = true && this.isSetBasic_info();
    boolean that_present_basic_info = true && that.isSetBasic_info();
    if (this_present_basic_info || that_present_basic_info) {
      if (!(this_present_basic_info && that_present_basic_info))
        return false;
      if (!this.basic_info.equals(that.basic_info))
        return false;
    }

    boolean this_present_militarRessource = true;
    boolean that_present_militarRessource = true;
    if (this_present_militarRessource || that_present_militarRessource) {
      if (!(this_present_militarRessource && that_present_militarRessource))
        return false;
      if (this.militarRessource != that.militarRessource)
        return false;
    }

    boolean this_present_fuelRessource = true;
    boolean that_present_fuelRessource = true;
    if (this_present_fuelRessource || that_present_fuelRessource) {
      if (!(this_present_fuelRessource && that_present_fuelRessource))
        return false;
      if (this.fuelRessource != that.fuelRessource)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BaseFullData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBasic_info()).compareTo(other.isSetBasic_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasic_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basic_info, other.basic_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMilitarRessource()).compareTo(other.isSetMilitarRessource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMilitarRessource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.militarRessource, other.militarRessource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFuelRessource()).compareTo(other.isSetFuelRessource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuelRessource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fuelRessource, other.fuelRessource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BaseFullData(");
    boolean first = true;

    sb.append("basic_info:");
    if (this.basic_info == null) {
      sb.append("null");
    } else {
      sb.append(this.basic_info);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("militarRessource:");
    sb.append(this.militarRessource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fuelRessource:");
    sb.append(this.fuelRessource);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (basic_info != null) {
      basic_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BaseFullDataStandardSchemeFactory implements SchemeFactory {
    public BaseFullDataStandardScheme getScheme() {
      return new BaseFullDataStandardScheme();
    }
  }

  private static class BaseFullDataStandardScheme extends StandardScheme<BaseFullData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BaseFullData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BASIC_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.basic_info = new BaseBasicData();
              struct.basic_info.read(iprot);
              struct.setBasic_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MILITAR_RESSOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.militarRessource = iprot.readDouble();
              struct.setMilitarRessourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FUEL_RESSOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fuelRessource = iprot.readDouble();
              struct.setFuelRessourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BaseFullData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.basic_info != null) {
        oprot.writeFieldBegin(BASIC_INFO_FIELD_DESC);
        struct.basic_info.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MILITAR_RESSOURCE_FIELD_DESC);
      oprot.writeDouble(struct.militarRessource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUEL_RESSOURCE_FIELD_DESC);
      oprot.writeDouble(struct.fuelRessource);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BaseFullDataTupleSchemeFactory implements SchemeFactory {
    public BaseFullDataTupleScheme getScheme() {
      return new BaseFullDataTupleScheme();
    }
  }

  private static class BaseFullDataTupleScheme extends TupleScheme<BaseFullData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BaseFullData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBasic_info()) {
        optionals.set(0);
      }
      if (struct.isSetMilitarRessource()) {
        optionals.set(1);
      }
      if (struct.isSetFuelRessource()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBasic_info()) {
        struct.basic_info.write(oprot);
      }
      if (struct.isSetMilitarRessource()) {
        oprot.writeDouble(struct.militarRessource);
      }
      if (struct.isSetFuelRessource()) {
        oprot.writeDouble(struct.fuelRessource);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BaseFullData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.basic_info = new BaseBasicData();
        struct.basic_info.read(iprot);
        struct.setBasic_infoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.militarRessource = iprot.readDouble();
        struct.setMilitarRessourceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fuelRessource = iprot.readDouble();
        struct.setFuelRessourceIsSet(true);
      }
    }
  }

}

