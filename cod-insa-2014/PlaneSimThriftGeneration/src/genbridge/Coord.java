/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package genbridge;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Coord implements org.apache.thrift.TBase<Coord, Coord._Fields>, java.io.Serializable, Cloneable, Comparable<Coord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Coord");

  private static final org.apache.thrift.protocol.TField LATID_FIELD_DESC = new org.apache.thrift.protocol.TField("latid", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField LONGIT_FIELD_DESC = new org.apache.thrift.protocol.TField("longit", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CoordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CoordTupleSchemeFactory());
  }

  public double latid; // required
  public double longit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LATID((short)1, "latid"),
    LONGIT((short)2, "longit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LATID
          return LATID;
        case 2: // LONGIT
          return LONGIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LATID_ISSET_ID = 0;
  private static final int __LONGIT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LATID, new org.apache.thrift.meta_data.FieldMetaData("latid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LONGIT, new org.apache.thrift.meta_data.FieldMetaData("longit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Coord.class, metaDataMap);
  }

  public Coord() {
  }

  public Coord(
    double latid,
    double longit)
  {
    this();
    this.latid = latid;
    setLatidIsSet(true);
    this.longit = longit;
    setLongitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Coord(Coord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.latid = other.latid;
    this.longit = other.longit;
  }

  public Coord deepCopy() {
    return new Coord(this);
  }

  @Override
  public void clear() {
    setLatidIsSet(false);
    this.latid = 0.0;
    setLongitIsSet(false);
    this.longit = 0.0;
  }

  public double getLatid() {
    return this.latid;
  }

  public Coord setLatid(double latid) {
    this.latid = latid;
    setLatidIsSet(true);
    return this;
  }

  public void unsetLatid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATID_ISSET_ID);
  }

  /** Returns true if field latid is set (has been assigned a value) and false otherwise */
  public boolean isSetLatid() {
    return EncodingUtils.testBit(__isset_bitfield, __LATID_ISSET_ID);
  }

  public void setLatidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATID_ISSET_ID, value);
  }

  public double getLongit() {
    return this.longit;
  }

  public Coord setLongit(double longit) {
    this.longit = longit;
    setLongitIsSet(true);
    return this;
  }

  public void unsetLongit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGIT_ISSET_ID);
  }

  /** Returns true if field longit is set (has been assigned a value) and false otherwise */
  public boolean isSetLongit() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGIT_ISSET_ID);
  }

  public void setLongitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LATID:
      if (value == null) {
        unsetLatid();
      } else {
        setLatid((Double)value);
      }
      break;

    case LONGIT:
      if (value == null) {
        unsetLongit();
      } else {
        setLongit((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LATID:
      return Double.valueOf(getLatid());

    case LONGIT:
      return Double.valueOf(getLongit());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LATID:
      return isSetLatid();
    case LONGIT:
      return isSetLongit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Coord)
      return this.equals((Coord)that);
    return false;
  }

  public boolean equals(Coord that) {
    if (that == null)
      return false;

    boolean this_present_latid = true;
    boolean that_present_latid = true;
    if (this_present_latid || that_present_latid) {
      if (!(this_present_latid && that_present_latid))
        return false;
      if (this.latid != that.latid)
        return false;
    }

    boolean this_present_longit = true;
    boolean that_present_longit = true;
    if (this_present_longit || that_present_longit) {
      if (!(this_present_longit && that_present_longit))
        return false;
      if (this.longit != that.longit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Coord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLatid()).compareTo(other.isSetLatid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latid, other.latid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongit()).compareTo(other.isSetLongit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longit, other.longit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Coord(");
    boolean first = true;

    sb.append("latid:");
    sb.append(this.latid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longit:");
    sb.append(this.longit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CoordStandardSchemeFactory implements SchemeFactory {
    public CoordStandardScheme getScheme() {
      return new CoordStandardScheme();
    }
  }

  private static class CoordStandardScheme extends StandardScheme<Coord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Coord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LATID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latid = iprot.readDouble();
              struct.setLatidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LONGIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longit = iprot.readDouble();
              struct.setLongitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Coord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LATID_FIELD_DESC);
      oprot.writeDouble(struct.latid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONGIT_FIELD_DESC);
      oprot.writeDouble(struct.longit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CoordTupleSchemeFactory implements SchemeFactory {
    public CoordTupleScheme getScheme() {
      return new CoordTupleScheme();
    }
  }

  private static class CoordTupleScheme extends TupleScheme<Coord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Coord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLatid()) {
        optionals.set(0);
      }
      if (struct.isSetLongit()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLatid()) {
        oprot.writeDouble(struct.latid);
      }
      if (struct.isSetLongit()) {
        oprot.writeDouble(struct.longit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Coord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.latid = iprot.readDouble();
        struct.setLatidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.longit = iprot.readDouble();
        struct.setLongitIsSet(true);
      }
    }
  }

}

