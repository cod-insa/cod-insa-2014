/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package genbridge;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CancelBuildRequestCommandData implements org.apache.thrift.TBase<CancelBuildRequestCommandData, CancelBuildRequestCommandData._Fields>, java.io.Serializable, Cloneable, Comparable<CancelBuildRequestCommandData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CancelBuildRequestCommandData");

  private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ID_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("id_request", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CancelBuildRequestCommandDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CancelBuildRequestCommandDataTupleSchemeFactory());
  }

  public CommandData c; // required
  public int id_request; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    C((short)1, "c"),
    ID_REQUEST((short)2, "id_request");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // C
          return C;
        case 2: // ID_REQUEST
          return ID_REQUEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_REQUEST_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommandData.class)));
    tmpMap.put(_Fields.ID_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("id_request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CancelBuildRequestCommandData.class, metaDataMap);
  }

  public CancelBuildRequestCommandData() {
  }

  public CancelBuildRequestCommandData(
    CommandData c,
    int id_request)
  {
    this();
    this.c = c;
    this.id_request = id_request;
    setId_requestIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CancelBuildRequestCommandData(CancelBuildRequestCommandData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetC()) {
      this.c = new CommandData(other.c);
    }
    this.id_request = other.id_request;
  }

  public CancelBuildRequestCommandData deepCopy() {
    return new CancelBuildRequestCommandData(this);
  }

  @Override
  public void clear() {
    this.c = null;
    setId_requestIsSet(false);
    this.id_request = 0;
  }

  public CommandData getC() {
    return this.c;
  }

  public CancelBuildRequestCommandData setC(CommandData c) {
    this.c = c;
    return this;
  }

  public void unsetC() {
    this.c = null;
  }

  /** Returns true if field c is set (has been assigned a value) and false otherwise */
  public boolean isSetC() {
    return this.c != null;
  }

  public void setCIsSet(boolean value) {
    if (!value) {
      this.c = null;
    }
  }

  public int getId_request() {
    return this.id_request;
  }

  public CancelBuildRequestCommandData setId_request(int id_request) {
    this.id_request = id_request;
    setId_requestIsSet(true);
    return this;
  }

  public void unsetId_request() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_REQUEST_ISSET_ID);
  }

  /** Returns true if field id_request is set (has been assigned a value) and false otherwise */
  public boolean isSetId_request() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_REQUEST_ISSET_ID);
  }

  public void setId_requestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_REQUEST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case C:
      if (value == null) {
        unsetC();
      } else {
        setC((CommandData)value);
      }
      break;

    case ID_REQUEST:
      if (value == null) {
        unsetId_request();
      } else {
        setId_request((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case C:
      return getC();

    case ID_REQUEST:
      return Integer.valueOf(getId_request());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case C:
      return isSetC();
    case ID_REQUEST:
      return isSetId_request();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CancelBuildRequestCommandData)
      return this.equals((CancelBuildRequestCommandData)that);
    return false;
  }

  public boolean equals(CancelBuildRequestCommandData that) {
    if (that == null)
      return false;

    boolean this_present_c = true && this.isSetC();
    boolean that_present_c = true && that.isSetC();
    if (this_present_c || that_present_c) {
      if (!(this_present_c && that_present_c))
        return false;
      if (!this.c.equals(that.c))
        return false;
    }

    boolean this_present_id_request = true;
    boolean that_present_id_request = true;
    if (this_present_id_request || that_present_id_request) {
      if (!(this_present_id_request && that_present_id_request))
        return false;
      if (this.id_request != that.id_request)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CancelBuildRequestCommandData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId_request()).compareTo(other.isSetId_request());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_request()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_request, other.id_request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CancelBuildRequestCommandData(");
    boolean first = true;

    sb.append("c:");
    if (this.c == null) {
      sb.append("null");
    } else {
      sb.append(this.c);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id_request:");
    sb.append(this.id_request);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (c != null) {
      c.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CancelBuildRequestCommandDataStandardSchemeFactory implements SchemeFactory {
    public CancelBuildRequestCommandDataStandardScheme getScheme() {
      return new CancelBuildRequestCommandDataStandardScheme();
    }
  }

  private static class CancelBuildRequestCommandDataStandardScheme extends StandardScheme<CancelBuildRequestCommandData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CancelBuildRequestCommandData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // C
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.c = new CommandData();
              struct.c.read(iprot);
              struct.setCIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id_request = iprot.readI32();
              struct.setId_requestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CancelBuildRequestCommandData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.c != null) {
        oprot.writeFieldBegin(C_FIELD_DESC);
        struct.c.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_REQUEST_FIELD_DESC);
      oprot.writeI32(struct.id_request);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CancelBuildRequestCommandDataTupleSchemeFactory implements SchemeFactory {
    public CancelBuildRequestCommandDataTupleScheme getScheme() {
      return new CancelBuildRequestCommandDataTupleScheme();
    }
  }

  private static class CancelBuildRequestCommandDataTupleScheme extends TupleScheme<CancelBuildRequestCommandData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CancelBuildRequestCommandData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetC()) {
        optionals.set(0);
      }
      if (struct.isSetId_request()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetC()) {
        struct.c.write(oprot);
      }
      if (struct.isSetId_request()) {
        oprot.writeI32(struct.id_request);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CancelBuildRequestCommandData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.c = new CommandData();
        struct.c.read(iprot);
        struct.setCIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id_request = iprot.readI32();
        struct.setId_requestIsSet(true);
      }
    }
  }

}

