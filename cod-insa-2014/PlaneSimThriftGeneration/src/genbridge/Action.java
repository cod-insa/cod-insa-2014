/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package genbridge;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Action implements org.apache.thrift.TBase<Action, Action._Fields>, java.io.Serializable, Cloneable, Comparable<Action> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Action");

  private static final org.apache.thrift.protocol.TField NUM_FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("numFrame", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("cmd", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ARG1_FIELD_DESC = new org.apache.thrift.protocol.TField("arg1", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ARG2_FIELD_DESC = new org.apache.thrift.protocol.TField("arg2", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ARG3_FIELD_DESC = new org.apache.thrift.protocol.TField("arg3", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActionTupleSchemeFactory());
  }

  public int numFrame; // required
  /**
   * 
   * @see Command
   */
  public Command cmd; // required
  public int arg1; // required
  public double arg2; // required
  public double arg3; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_FRAME((short)1, "numFrame"),
    /**
     * 
     * @see Command
     */
    CMD((short)2, "cmd"),
    ARG1((short)3, "arg1"),
    ARG2((short)4, "arg2"),
    ARG3((short)5, "arg3");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_FRAME
          return NUM_FRAME;
        case 2: // CMD
          return CMD;
        case 3: // ARG1
          return ARG1;
        case 4: // ARG2
          return ARG2;
        case 5: // ARG3
          return ARG3;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMFRAME_ISSET_ID = 0;
  private static final int __ARG1_ISSET_ID = 1;
  private static final int __ARG2_ISSET_ID = 2;
  private static final int __ARG3_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_FRAME, new org.apache.thrift.meta_data.FieldMetaData("numFrame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.CMD, new org.apache.thrift.meta_data.FieldMetaData("cmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Command.class)));
    tmpMap.put(_Fields.ARG1, new org.apache.thrift.meta_data.FieldMetaData("arg1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ARG2, new org.apache.thrift.meta_data.FieldMetaData("arg2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ARG3, new org.apache.thrift.meta_data.FieldMetaData("arg3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Action.class, metaDataMap);
  }

  public Action() {
  }

  public Action(
    int numFrame,
    Command cmd,
    int arg1,
    double arg2,
    double arg3)
  {
    this();
    this.numFrame = numFrame;
    setNumFrameIsSet(true);
    this.cmd = cmd;
    this.arg1 = arg1;
    setArg1IsSet(true);
    this.arg2 = arg2;
    setArg2IsSet(true);
    this.arg3 = arg3;
    setArg3IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Action(Action other) {
    __isset_bitfield = other.__isset_bitfield;
    this.numFrame = other.numFrame;
    if (other.isSetCmd()) {
      this.cmd = other.cmd;
    }
    this.arg1 = other.arg1;
    this.arg2 = other.arg2;
    this.arg3 = other.arg3;
  }

  public Action deepCopy() {
    return new Action(this);
  }

  @Override
  public void clear() {
    setNumFrameIsSet(false);
    this.numFrame = 0;
    this.cmd = null;
    setArg1IsSet(false);
    this.arg1 = 0;
    setArg2IsSet(false);
    this.arg2 = 0.0;
    setArg3IsSet(false);
    this.arg3 = 0.0;
  }

  public int getNumFrame() {
    return this.numFrame;
  }

  public Action setNumFrame(int numFrame) {
    this.numFrame = numFrame;
    setNumFrameIsSet(true);
    return this;
  }

  public void unsetNumFrame() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMFRAME_ISSET_ID);
  }

  /** Returns true if field numFrame is set (has been assigned a value) and false otherwise */
  public boolean isSetNumFrame() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMFRAME_ISSET_ID);
  }

  public void setNumFrameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMFRAME_ISSET_ID, value);
  }

  /**
   * 
   * @see Command
   */
  public Command getCmd() {
    return this.cmd;
  }

  /**
   * 
   * @see Command
   */
  public Action setCmd(Command cmd) {
    this.cmd = cmd;
    return this;
  }

  public void unsetCmd() {
    this.cmd = null;
  }

  /** Returns true if field cmd is set (has been assigned a value) and false otherwise */
  public boolean isSetCmd() {
    return this.cmd != null;
  }

  public void setCmdIsSet(boolean value) {
    if (!value) {
      this.cmd = null;
    }
  }

  public int getArg1() {
    return this.arg1;
  }

  public Action setArg1(int arg1) {
    this.arg1 = arg1;
    setArg1IsSet(true);
    return this;
  }

  public void unsetArg1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG1_ISSET_ID);
  }

  /** Returns true if field arg1 is set (has been assigned a value) and false otherwise */
  public boolean isSetArg1() {
    return EncodingUtils.testBit(__isset_bitfield, __ARG1_ISSET_ID);
  }

  public void setArg1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG1_ISSET_ID, value);
  }

  public double getArg2() {
    return this.arg2;
  }

  public Action setArg2(double arg2) {
    this.arg2 = arg2;
    setArg2IsSet(true);
    return this;
  }

  public void unsetArg2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG2_ISSET_ID);
  }

  /** Returns true if field arg2 is set (has been assigned a value) and false otherwise */
  public boolean isSetArg2() {
    return EncodingUtils.testBit(__isset_bitfield, __ARG2_ISSET_ID);
  }

  public void setArg2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG2_ISSET_ID, value);
  }

  public double getArg3() {
    return this.arg3;
  }

  public Action setArg3(double arg3) {
    this.arg3 = arg3;
    setArg3IsSet(true);
    return this;
  }

  public void unsetArg3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG3_ISSET_ID);
  }

  /** Returns true if field arg3 is set (has been assigned a value) and false otherwise */
  public boolean isSetArg3() {
    return EncodingUtils.testBit(__isset_bitfield, __ARG3_ISSET_ID);
  }

  public void setArg3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG3_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_FRAME:
      if (value == null) {
        unsetNumFrame();
      } else {
        setNumFrame((Integer)value);
      }
      break;

    case CMD:
      if (value == null) {
        unsetCmd();
      } else {
        setCmd((Command)value);
      }
      break;

    case ARG1:
      if (value == null) {
        unsetArg1();
      } else {
        setArg1((Integer)value);
      }
      break;

    case ARG2:
      if (value == null) {
        unsetArg2();
      } else {
        setArg2((Double)value);
      }
      break;

    case ARG3:
      if (value == null) {
        unsetArg3();
      } else {
        setArg3((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_FRAME:
      return Integer.valueOf(getNumFrame());

    case CMD:
      return getCmd();

    case ARG1:
      return Integer.valueOf(getArg1());

    case ARG2:
      return Double.valueOf(getArg2());

    case ARG3:
      return Double.valueOf(getArg3());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_FRAME:
      return isSetNumFrame();
    case CMD:
      return isSetCmd();
    case ARG1:
      return isSetArg1();
    case ARG2:
      return isSetArg2();
    case ARG3:
      return isSetArg3();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Action)
      return this.equals((Action)that);
    return false;
  }

  public boolean equals(Action that) {
    if (that == null)
      return false;

    boolean this_present_numFrame = true;
    boolean that_present_numFrame = true;
    if (this_present_numFrame || that_present_numFrame) {
      if (!(this_present_numFrame && that_present_numFrame))
        return false;
      if (this.numFrame != that.numFrame)
        return false;
    }

    boolean this_present_cmd = true && this.isSetCmd();
    boolean that_present_cmd = true && that.isSetCmd();
    if (this_present_cmd || that_present_cmd) {
      if (!(this_present_cmd && that_present_cmd))
        return false;
      if (!this.cmd.equals(that.cmd))
        return false;
    }

    boolean this_present_arg1 = true;
    boolean that_present_arg1 = true;
    if (this_present_arg1 || that_present_arg1) {
      if (!(this_present_arg1 && that_present_arg1))
        return false;
      if (this.arg1 != that.arg1)
        return false;
    }

    boolean this_present_arg2 = true;
    boolean that_present_arg2 = true;
    if (this_present_arg2 || that_present_arg2) {
      if (!(this_present_arg2 && that_present_arg2))
        return false;
      if (this.arg2 != that.arg2)
        return false;
    }

    boolean this_present_arg3 = true;
    boolean that_present_arg3 = true;
    if (this_present_arg3 || that_present_arg3) {
      if (!(this_present_arg3 && that_present_arg3))
        return false;
      if (this.arg3 != that.arg3)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Action other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNumFrame()).compareTo(other.isSetNumFrame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumFrame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numFrame, other.numFrame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCmd()).compareTo(other.isSetCmd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmd, other.cmd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArg1()).compareTo(other.isSetArg1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArg1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg1, other.arg1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArg2()).compareTo(other.isSetArg2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArg2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg2, other.arg2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArg3()).compareTo(other.isSetArg3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArg3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg3, other.arg3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Action(");
    boolean first = true;

    sb.append("numFrame:");
    sb.append(this.numFrame);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cmd:");
    if (this.cmd == null) {
      sb.append("null");
    } else {
      sb.append(this.cmd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arg1:");
    sb.append(this.arg1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arg2:");
    sb.append(this.arg2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arg3:");
    sb.append(this.arg3);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActionStandardSchemeFactory implements SchemeFactory {
    public ActionStandardScheme getScheme() {
      return new ActionStandardScheme();
    }
  }

  private static class ActionStandardScheme extends StandardScheme<Action> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Action struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_FRAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numFrame = iprot.readI32();
              struct.setNumFrameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CMD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cmd = Command.findByValue(iprot.readI32());
              struct.setCmdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARG1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.arg1 = iprot.readI32();
              struct.setArg1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARG2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.arg2 = iprot.readDouble();
              struct.setArg2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ARG3
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.arg3 = iprot.readDouble();
              struct.setArg3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Action struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_FRAME_FIELD_DESC);
      oprot.writeI32(struct.numFrame);
      oprot.writeFieldEnd();
      if (struct.cmd != null) {
        oprot.writeFieldBegin(CMD_FIELD_DESC);
        oprot.writeI32(struct.cmd.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ARG1_FIELD_DESC);
      oprot.writeI32(struct.arg1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARG2_FIELD_DESC);
      oprot.writeDouble(struct.arg2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARG3_FIELD_DESC);
      oprot.writeDouble(struct.arg3);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActionTupleSchemeFactory implements SchemeFactory {
    public ActionTupleScheme getScheme() {
      return new ActionTupleScheme();
    }
  }

  private static class ActionTupleScheme extends TupleScheme<Action> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Action struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNumFrame()) {
        optionals.set(0);
      }
      if (struct.isSetCmd()) {
        optionals.set(1);
      }
      if (struct.isSetArg1()) {
        optionals.set(2);
      }
      if (struct.isSetArg2()) {
        optionals.set(3);
      }
      if (struct.isSetArg3()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNumFrame()) {
        oprot.writeI32(struct.numFrame);
      }
      if (struct.isSetCmd()) {
        oprot.writeI32(struct.cmd.getValue());
      }
      if (struct.isSetArg1()) {
        oprot.writeI32(struct.arg1);
      }
      if (struct.isSetArg2()) {
        oprot.writeDouble(struct.arg2);
      }
      if (struct.isSetArg3()) {
        oprot.writeDouble(struct.arg3);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Action struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.numFrame = iprot.readI32();
        struct.setNumFrameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cmd = Command.findByValue(iprot.readI32());
        struct.setCmdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.arg1 = iprot.readI32();
        struct.setArg1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.arg2 = iprot.readDouble();
        struct.setArg2IsSet(true);
      }
      if (incoming.get(4)) {
        struct.arg3 = iprot.readDouble();
        struct.setArg3IsSet(true);
      }
    }
  }

}

