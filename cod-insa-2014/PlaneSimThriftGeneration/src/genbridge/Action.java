package genbridge;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Action implements org.apache.thrift.TBase<Action, Action._Fields>, java.io.Serializable, Cloneable, Comparable<Action> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Action");

  private static final org.apache.thrift.protocol.TField CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("cmd", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("base_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PLANE_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("plane_id1", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PLANE_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("plane_id2", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActionTupleSchemeFactory());
  }

  /**
   * 
   * @see Command
   */
  public Command cmd; // required
  public int base_id; // required
  public int plane_id1; // required
  public int plane_id2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Command
     */
    CMD((short)1, "cmd"),
    BASE_ID((short)2, "base_id"),
    PLANE_ID1((short)3, "plane_id1"),
    PLANE_ID2((short)4, "plane_id2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CMD
          return CMD;
        case 2: // BASE_ID
          return BASE_ID;
        case 3: // PLANE_ID1
          return PLANE_ID1;
        case 4: // PLANE_ID2
          return PLANE_ID2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BASE_ID_ISSET_ID = 0;
  private static final int __PLANE_ID1_ISSET_ID = 1;
  private static final int __PLANE_ID2_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CMD, new org.apache.thrift.meta_data.FieldMetaData("cmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Command.class)));
    tmpMap.put(_Fields.BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("base_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLANE_ID1, new org.apache.thrift.meta_data.FieldMetaData("plane_id1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLANE_ID2, new org.apache.thrift.meta_data.FieldMetaData("plane_id2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Action.class, metaDataMap);
  }

  public Action() {
  }

  public Action(
    Command cmd,
    int base_id,
    int plane_id1,
    int plane_id2)
  {
    this();
    this.cmd = cmd;
    this.base_id = base_id;
    setBase_idIsSet(true);
    this.plane_id1 = plane_id1;
    setPlane_id1IsSet(true);
    this.plane_id2 = plane_id2;
    setPlane_id2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Action(Action other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCmd()) {
      this.cmd = other.cmd;
    }
    this.base_id = other.base_id;
    this.plane_id1 = other.plane_id1;
    this.plane_id2 = other.plane_id2;
  }

  public Action deepCopy() {
    return new Action(this);
  }

  @Override
  public void clear() {
    this.cmd = null;
    setBase_idIsSet(false);
    this.base_id = 0;
    setPlane_id1IsSet(false);
    this.plane_id1 = 0;
    setPlane_id2IsSet(false);
    this.plane_id2 = 0;
  }

  /**
   * 
   * @see Command
   */
  public Command getCmd() {
    return this.cmd;
  }

  /**
   * 
   * @see Command
   */
  public Action setCmd(Command cmd) {
    this.cmd = cmd;
    return this;
  }

  public void unsetCmd() {
    this.cmd = null;
  }

  /** Returns true if field cmd is set (has been assigned a value) and false otherwise */
  public boolean isSetCmd() {
    return this.cmd != null;
  }

  public void setCmdIsSet(boolean value) {
    if (!value) {
      this.cmd = null;
    }
  }

  public int getBase_id() {
    return this.base_id;
  }

  public Action setBase_id(int base_id) {
    this.base_id = base_id;
    setBase_idIsSet(true);
    return this;
  }

  public void unsetBase_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASE_ID_ISSET_ID);
  }

  /** Returns true if field base_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBase_id() {
    return EncodingUtils.testBit(__isset_bitfield, __BASE_ID_ISSET_ID);
  }

  public void setBase_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASE_ID_ISSET_ID, value);
  }

  public int getPlane_id1() {
    return this.plane_id1;
  }

  public Action setPlane_id1(int plane_id1) {
    this.plane_id1 = plane_id1;
    setPlane_id1IsSet(true);
    return this;
  }

  public void unsetPlane_id1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANE_ID1_ISSET_ID);
  }

  /** Returns true if field plane_id1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPlane_id1() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANE_ID1_ISSET_ID);
  }

  public void setPlane_id1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANE_ID1_ISSET_ID, value);
  }

  public int getPlane_id2() {
    return this.plane_id2;
  }

  public Action setPlane_id2(int plane_id2) {
    this.plane_id2 = plane_id2;
    setPlane_id2IsSet(true);
    return this;
  }

  public void unsetPlane_id2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANE_ID2_ISSET_ID);
  }

  /** Returns true if field plane_id2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPlane_id2() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANE_ID2_ISSET_ID);
  }

  public void setPlane_id2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANE_ID2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CMD:
      if (value == null) {
        unsetCmd();
      } else {
        setCmd((Command)value);
      }
      break;

    case BASE_ID:
      if (value == null) {
        unsetBase_id();
      } else {
        setBase_id((Integer)value);
      }
      break;

    case PLANE_ID1:
      if (value == null) {
        unsetPlane_id1();
      } else {
        setPlane_id1((Integer)value);
      }
      break;

    case PLANE_ID2:
      if (value == null) {
        unsetPlane_id2();
      } else {
        setPlane_id2((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CMD:
      return getCmd();

    case BASE_ID:
      return Integer.valueOf(getBase_id());

    case PLANE_ID1:
      return Integer.valueOf(getPlane_id1());

    case PLANE_ID2:
      return Integer.valueOf(getPlane_id2());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CMD:
      return isSetCmd();
    case BASE_ID:
      return isSetBase_id();
    case PLANE_ID1:
      return isSetPlane_id1();
    case PLANE_ID2:
      return isSetPlane_id2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Action)
      return this.equals((Action)that);
    return false;
  }

  public boolean equals(Action that) {
    if (that == null)
      return false;

    boolean this_present_cmd = true && this.isSetCmd();
    boolean that_present_cmd = true && that.isSetCmd();
    if (this_present_cmd || that_present_cmd) {
      if (!(this_present_cmd && that_present_cmd))
        return false;
      if (!this.cmd.equals(that.cmd))
        return false;
    }

    boolean this_present_base_id = true;
    boolean that_present_base_id = true;
    if (this_present_base_id || that_present_base_id) {
      if (!(this_present_base_id && that_present_base_id))
        return false;
      if (this.base_id != that.base_id)
        return false;
    }

    boolean this_present_plane_id1 = true;
    boolean that_present_plane_id1 = true;
    if (this_present_plane_id1 || that_present_plane_id1) {
      if (!(this_present_plane_id1 && that_present_plane_id1))
        return false;
      if (this.plane_id1 != that.plane_id1)
        return false;
    }

    boolean this_present_plane_id2 = true;
    boolean that_present_plane_id2 = true;
    if (this_present_plane_id2 || that_present_plane_id2) {
      if (!(this_present_plane_id2 && that_present_plane_id2))
        return false;
      if (this.plane_id2 != that.plane_id2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Action other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCmd()).compareTo(other.isSetCmd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmd, other.cmd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBase_id()).compareTo(other.isSetBase_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_id, other.base_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlane_id1()).compareTo(other.isSetPlane_id1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlane_id1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plane_id1, other.plane_id1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlane_id2()).compareTo(other.isSetPlane_id2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlane_id2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plane_id2, other.plane_id2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Action(");
    boolean first = true;

    sb.append("cmd:");
    if (this.cmd == null) {
      sb.append("null");
    } else {
      sb.append(this.cmd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("base_id:");
    sb.append(this.base_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("plane_id1:");
    sb.append(this.plane_id1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("plane_id2:");
    sb.append(this.plane_id2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActionStandardSchemeFactory implements SchemeFactory {
    public ActionStandardScheme getScheme() {
      return new ActionStandardScheme();
    }
  }

  private static class ActionStandardScheme extends StandardScheme<Action> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Action struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CMD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cmd = Command.findByValue(iprot.readI32());
              struct.setCmdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.base_id = iprot.readI32();
              struct.setBase_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLANE_ID1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.plane_id1 = iprot.readI32();
              struct.setPlane_id1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLANE_ID2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.plane_id2 = iprot.readI32();
              struct.setPlane_id2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Action struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cmd != null) {
        oprot.writeFieldBegin(CMD_FIELD_DESC);
        oprot.writeI32(struct.cmd.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BASE_ID_FIELD_DESC);
      oprot.writeI32(struct.base_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLANE_ID1_FIELD_DESC);
      oprot.writeI32(struct.plane_id1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLANE_ID2_FIELD_DESC);
      oprot.writeI32(struct.plane_id2);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActionTupleSchemeFactory implements SchemeFactory {
    public ActionTupleScheme getScheme() {
      return new ActionTupleScheme();
    }
  }

  private static class ActionTupleScheme extends TupleScheme<Action> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Action struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCmd()) {
        optionals.set(0);
      }
      if (struct.isSetBase_id()) {
        optionals.set(1);
      }
      if (struct.isSetPlane_id1()) {
        optionals.set(2);
      }
      if (struct.isSetPlane_id2()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCmd()) {
        oprot.writeI32(struct.cmd.getValue());
      }
      if (struct.isSetBase_id()) {
        oprot.writeI32(struct.base_id);
      }
      if (struct.isSetPlane_id1()) {
        oprot.writeI32(struct.plane_id1);
      }
      if (struct.isSetPlane_id2()) {
        oprot.writeI32(struct.plane_id2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Action struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.cmd = Command.findByValue(iprot.readI32());
        struct.setCmdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.base_id = iprot.readI32();
        struct.setBase_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.plane_id1 = iprot.readI32();
        struct.setPlane_id1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.plane_id2 = iprot.readI32();
        struct.setPlane_id2IsSet(true);
      }
    }
  }

}

