/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package genbridge;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Data implements org.apache.thrift.TBase<Data, Data._Fields>, java.io.Serializable, Cloneable, Comparable<Data> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Data");

  private static final org.apache.thrift.protocol.TField NUM_FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("numFrame", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OWNED_PLANES_FIELD_DESC = new org.apache.thrift.protocol.TField("owned_planes", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField NOT_OWNED_PLANES_FIELD_DESC = new org.apache.thrift.protocol.TField("not_owned_planes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OWNED_BASES_FIELD_DESC = new org.apache.thrift.protocol.TField("owned_bases", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField NOT_OWNED_BASES_FIELD_DESC = new org.apache.thrift.protocol.TField("not_owned_bases", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PROGRESS_AXIS_FIELD_DESC = new org.apache.thrift.protocol.TField("progressAxis", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField MY_COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("myCountry", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField CURRENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("currentMoney", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataTupleSchemeFactory());
  }

  public int numFrame; // required
  public List<PlaneFullData> owned_planes; // required
  public List<PlaneBasicData> not_owned_planes; // required
  public List<BaseFullData> owned_bases; // required
  public List<BaseBasicData> not_owned_bases; // required
  public List<ProgressAxisData> progressAxis; // required
  public CountryData myCountry; // required
  public int currentMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_FRAME((short)1, "numFrame"),
    OWNED_PLANES((short)2, "owned_planes"),
    NOT_OWNED_PLANES((short)3, "not_owned_planes"),
    OWNED_BASES((short)4, "owned_bases"),
    NOT_OWNED_BASES((short)5, "not_owned_bases"),
    PROGRESS_AXIS((short)6, "progressAxis"),
    MY_COUNTRY((short)7, "myCountry"),
    CURRENT_MONEY((short)8, "currentMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_FRAME
          return NUM_FRAME;
        case 2: // OWNED_PLANES
          return OWNED_PLANES;
        case 3: // NOT_OWNED_PLANES
          return NOT_OWNED_PLANES;
        case 4: // OWNED_BASES
          return OWNED_BASES;
        case 5: // NOT_OWNED_BASES
          return NOT_OWNED_BASES;
        case 6: // PROGRESS_AXIS
          return PROGRESS_AXIS;
        case 7: // MY_COUNTRY
          return MY_COUNTRY;
        case 8: // CURRENT_MONEY
          return CURRENT_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMFRAME_ISSET_ID = 0;
  private static final int __CURRENTMONEY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_FRAME, new org.apache.thrift.meta_data.FieldMetaData("numFrame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.OWNED_PLANES, new org.apache.thrift.meta_data.FieldMetaData("owned_planes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlaneFullData.class))));
    tmpMap.put(_Fields.NOT_OWNED_PLANES, new org.apache.thrift.meta_data.FieldMetaData("not_owned_planes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlaneBasicData.class))));
    tmpMap.put(_Fields.OWNED_BASES, new org.apache.thrift.meta_data.FieldMetaData("owned_bases", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BaseFullData.class))));
    tmpMap.put(_Fields.NOT_OWNED_BASES, new org.apache.thrift.meta_data.FieldMetaData("not_owned_bases", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BaseBasicData.class))));
    tmpMap.put(_Fields.PROGRESS_AXIS, new org.apache.thrift.meta_data.FieldMetaData("progressAxis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProgressAxisData.class))));
    tmpMap.put(_Fields.MY_COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("myCountry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CountryData.class)));
    tmpMap.put(_Fields.CURRENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("currentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Data.class, metaDataMap);
  }

  public Data() {
  }

  public Data(
    int numFrame,
    List<PlaneFullData> owned_planes,
    List<PlaneBasicData> not_owned_planes,
    List<BaseFullData> owned_bases,
    List<BaseBasicData> not_owned_bases,
    List<ProgressAxisData> progressAxis,
    CountryData myCountry,
    int currentMoney)
  {
    this();
    this.numFrame = numFrame;
    setNumFrameIsSet(true);
    this.owned_planes = owned_planes;
    this.not_owned_planes = not_owned_planes;
    this.owned_bases = owned_bases;
    this.not_owned_bases = not_owned_bases;
    this.progressAxis = progressAxis;
    this.myCountry = myCountry;
    this.currentMoney = currentMoney;
    setCurrentMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Data(Data other) {
    __isset_bitfield = other.__isset_bitfield;
    this.numFrame = other.numFrame;
    if (other.isSetOwned_planes()) {
      List<PlaneFullData> __this__owned_planes = new ArrayList<PlaneFullData>(other.owned_planes.size());
      for (PlaneFullData other_element : other.owned_planes) {
        __this__owned_planes.add(new PlaneFullData(other_element));
      }
      this.owned_planes = __this__owned_planes;
    }
    if (other.isSetNot_owned_planes()) {
      List<PlaneBasicData> __this__not_owned_planes = new ArrayList<PlaneBasicData>(other.not_owned_planes.size());
      for (PlaneBasicData other_element : other.not_owned_planes) {
        __this__not_owned_planes.add(new PlaneBasicData(other_element));
      }
      this.not_owned_planes = __this__not_owned_planes;
    }
    if (other.isSetOwned_bases()) {
      List<BaseFullData> __this__owned_bases = new ArrayList<BaseFullData>(other.owned_bases.size());
      for (BaseFullData other_element : other.owned_bases) {
        __this__owned_bases.add(new BaseFullData(other_element));
      }
      this.owned_bases = __this__owned_bases;
    }
    if (other.isSetNot_owned_bases()) {
      List<BaseBasicData> __this__not_owned_bases = new ArrayList<BaseBasicData>(other.not_owned_bases.size());
      for (BaseBasicData other_element : other.not_owned_bases) {
        __this__not_owned_bases.add(new BaseBasicData(other_element));
      }
      this.not_owned_bases = __this__not_owned_bases;
    }
    if (other.isSetProgressAxis()) {
      List<ProgressAxisData> __this__progressAxis = new ArrayList<ProgressAxisData>(other.progressAxis.size());
      for (ProgressAxisData other_element : other.progressAxis) {
        __this__progressAxis.add(new ProgressAxisData(other_element));
      }
      this.progressAxis = __this__progressAxis;
    }
    if (other.isSetMyCountry()) {
      this.myCountry = new CountryData(other.myCountry);
    }
    this.currentMoney = other.currentMoney;
  }

  public Data deepCopy() {
    return new Data(this);
  }

  @Override
  public void clear() {
    setNumFrameIsSet(false);
    this.numFrame = 0;
    this.owned_planes = null;
    this.not_owned_planes = null;
    this.owned_bases = null;
    this.not_owned_bases = null;
    this.progressAxis = null;
    this.myCountry = null;
    setCurrentMoneyIsSet(false);
    this.currentMoney = 0;
  }

  public int getNumFrame() {
    return this.numFrame;
  }

  public Data setNumFrame(int numFrame) {
    this.numFrame = numFrame;
    setNumFrameIsSet(true);
    return this;
  }

  public void unsetNumFrame() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMFRAME_ISSET_ID);
  }

  /** Returns true if field numFrame is set (has been assigned a value) and false otherwise */
  public boolean isSetNumFrame() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMFRAME_ISSET_ID);
  }

  public void setNumFrameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMFRAME_ISSET_ID, value);
  }

  public int getOwned_planesSize() {
    return (this.owned_planes == null) ? 0 : this.owned_planes.size();
  }

  public java.util.Iterator<PlaneFullData> getOwned_planesIterator() {
    return (this.owned_planes == null) ? null : this.owned_planes.iterator();
  }

  public void addToOwned_planes(PlaneFullData elem) {
    if (this.owned_planes == null) {
      this.owned_planes = new ArrayList<PlaneFullData>();
    }
    this.owned_planes.add(elem);
  }

  public List<PlaneFullData> getOwned_planes() {
    return this.owned_planes;
  }

  public Data setOwned_planes(List<PlaneFullData> owned_planes) {
    this.owned_planes = owned_planes;
    return this;
  }

  public void unsetOwned_planes() {
    this.owned_planes = null;
  }

  /** Returns true if field owned_planes is set (has been assigned a value) and false otherwise */
  public boolean isSetOwned_planes() {
    return this.owned_planes != null;
  }

  public void setOwned_planesIsSet(boolean value) {
    if (!value) {
      this.owned_planes = null;
    }
  }

  public int getNot_owned_planesSize() {
    return (this.not_owned_planes == null) ? 0 : this.not_owned_planes.size();
  }

  public java.util.Iterator<PlaneBasicData> getNot_owned_planesIterator() {
    return (this.not_owned_planes == null) ? null : this.not_owned_planes.iterator();
  }

  public void addToNot_owned_planes(PlaneBasicData elem) {
    if (this.not_owned_planes == null) {
      this.not_owned_planes = new ArrayList<PlaneBasicData>();
    }
    this.not_owned_planes.add(elem);
  }

  public List<PlaneBasicData> getNot_owned_planes() {
    return this.not_owned_planes;
  }

  public Data setNot_owned_planes(List<PlaneBasicData> not_owned_planes) {
    this.not_owned_planes = not_owned_planes;
    return this;
  }

  public void unsetNot_owned_planes() {
    this.not_owned_planes = null;
  }

  /** Returns true if field not_owned_planes is set (has been assigned a value) and false otherwise */
  public boolean isSetNot_owned_planes() {
    return this.not_owned_planes != null;
  }

  public void setNot_owned_planesIsSet(boolean value) {
    if (!value) {
      this.not_owned_planes = null;
    }
  }

  public int getOwned_basesSize() {
    return (this.owned_bases == null) ? 0 : this.owned_bases.size();
  }

  public java.util.Iterator<BaseFullData> getOwned_basesIterator() {
    return (this.owned_bases == null) ? null : this.owned_bases.iterator();
  }

  public void addToOwned_bases(BaseFullData elem) {
    if (this.owned_bases == null) {
      this.owned_bases = new ArrayList<BaseFullData>();
    }
    this.owned_bases.add(elem);
  }

  public List<BaseFullData> getOwned_bases() {
    return this.owned_bases;
  }

  public Data setOwned_bases(List<BaseFullData> owned_bases) {
    this.owned_bases = owned_bases;
    return this;
  }

  public void unsetOwned_bases() {
    this.owned_bases = null;
  }

  /** Returns true if field owned_bases is set (has been assigned a value) and false otherwise */
  public boolean isSetOwned_bases() {
    return this.owned_bases != null;
  }

  public void setOwned_basesIsSet(boolean value) {
    if (!value) {
      this.owned_bases = null;
    }
  }

  public int getNot_owned_basesSize() {
    return (this.not_owned_bases == null) ? 0 : this.not_owned_bases.size();
  }

  public java.util.Iterator<BaseBasicData> getNot_owned_basesIterator() {
    return (this.not_owned_bases == null) ? null : this.not_owned_bases.iterator();
  }

  public void addToNot_owned_bases(BaseBasicData elem) {
    if (this.not_owned_bases == null) {
      this.not_owned_bases = new ArrayList<BaseBasicData>();
    }
    this.not_owned_bases.add(elem);
  }

  public List<BaseBasicData> getNot_owned_bases() {
    return this.not_owned_bases;
  }

  public Data setNot_owned_bases(List<BaseBasicData> not_owned_bases) {
    this.not_owned_bases = not_owned_bases;
    return this;
  }

  public void unsetNot_owned_bases() {
    this.not_owned_bases = null;
  }

  /** Returns true if field not_owned_bases is set (has been assigned a value) and false otherwise */
  public boolean isSetNot_owned_bases() {
    return this.not_owned_bases != null;
  }

  public void setNot_owned_basesIsSet(boolean value) {
    if (!value) {
      this.not_owned_bases = null;
    }
  }

  public int getProgressAxisSize() {
    return (this.progressAxis == null) ? 0 : this.progressAxis.size();
  }

  public java.util.Iterator<ProgressAxisData> getProgressAxisIterator() {
    return (this.progressAxis == null) ? null : this.progressAxis.iterator();
  }

  public void addToProgressAxis(ProgressAxisData elem) {
    if (this.progressAxis == null) {
      this.progressAxis = new ArrayList<ProgressAxisData>();
    }
    this.progressAxis.add(elem);
  }

  public List<ProgressAxisData> getProgressAxis() {
    return this.progressAxis;
  }

  public Data setProgressAxis(List<ProgressAxisData> progressAxis) {
    this.progressAxis = progressAxis;
    return this;
  }

  public void unsetProgressAxis() {
    this.progressAxis = null;
  }

  /** Returns true if field progressAxis is set (has been assigned a value) and false otherwise */
  public boolean isSetProgressAxis() {
    return this.progressAxis != null;
  }

  public void setProgressAxisIsSet(boolean value) {
    if (!value) {
      this.progressAxis = null;
    }
  }

  public CountryData getMyCountry() {
    return this.myCountry;
  }

  public Data setMyCountry(CountryData myCountry) {
    this.myCountry = myCountry;
    return this;
  }

  public void unsetMyCountry() {
    this.myCountry = null;
  }

  /** Returns true if field myCountry is set (has been assigned a value) and false otherwise */
  public boolean isSetMyCountry() {
    return this.myCountry != null;
  }

  public void setMyCountryIsSet(boolean value) {
    if (!value) {
      this.myCountry = null;
    }
  }

  public int getCurrentMoney() {
    return this.currentMoney;
  }

  public Data setCurrentMoney(int currentMoney) {
    this.currentMoney = currentMoney;
    setCurrentMoneyIsSet(true);
    return this;
  }

  public void unsetCurrentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTMONEY_ISSET_ID);
  }

  /** Returns true if field currentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTMONEY_ISSET_ID);
  }

  public void setCurrentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_FRAME:
      if (value == null) {
        unsetNumFrame();
      } else {
        setNumFrame((Integer)value);
      }
      break;

    case OWNED_PLANES:
      if (value == null) {
        unsetOwned_planes();
      } else {
        setOwned_planes((List<PlaneFullData>)value);
      }
      break;

    case NOT_OWNED_PLANES:
      if (value == null) {
        unsetNot_owned_planes();
      } else {
        setNot_owned_planes((List<PlaneBasicData>)value);
      }
      break;

    case OWNED_BASES:
      if (value == null) {
        unsetOwned_bases();
      } else {
        setOwned_bases((List<BaseFullData>)value);
      }
      break;

    case NOT_OWNED_BASES:
      if (value == null) {
        unsetNot_owned_bases();
      } else {
        setNot_owned_bases((List<BaseBasicData>)value);
      }
      break;

    case PROGRESS_AXIS:
      if (value == null) {
        unsetProgressAxis();
      } else {
        setProgressAxis((List<ProgressAxisData>)value);
      }
      break;

    case MY_COUNTRY:
      if (value == null) {
        unsetMyCountry();
      } else {
        setMyCountry((CountryData)value);
      }
      break;

    case CURRENT_MONEY:
      if (value == null) {
        unsetCurrentMoney();
      } else {
        setCurrentMoney((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_FRAME:
      return Integer.valueOf(getNumFrame());

    case OWNED_PLANES:
      return getOwned_planes();

    case NOT_OWNED_PLANES:
      return getNot_owned_planes();

    case OWNED_BASES:
      return getOwned_bases();

    case NOT_OWNED_BASES:
      return getNot_owned_bases();

    case PROGRESS_AXIS:
      return getProgressAxis();

    case MY_COUNTRY:
      return getMyCountry();

    case CURRENT_MONEY:
      return Integer.valueOf(getCurrentMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_FRAME:
      return isSetNumFrame();
    case OWNED_PLANES:
      return isSetOwned_planes();
    case NOT_OWNED_PLANES:
      return isSetNot_owned_planes();
    case OWNED_BASES:
      return isSetOwned_bases();
    case NOT_OWNED_BASES:
      return isSetNot_owned_bases();
    case PROGRESS_AXIS:
      return isSetProgressAxis();
    case MY_COUNTRY:
      return isSetMyCountry();
    case CURRENT_MONEY:
      return isSetCurrentMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Data)
      return this.equals((Data)that);
    return false;
  }

  public boolean equals(Data that) {
    if (that == null)
      return false;

    boolean this_present_numFrame = true;
    boolean that_present_numFrame = true;
    if (this_present_numFrame || that_present_numFrame) {
      if (!(this_present_numFrame && that_present_numFrame))
        return false;
      if (this.numFrame != that.numFrame)
        return false;
    }

    boolean this_present_owned_planes = true && this.isSetOwned_planes();
    boolean that_present_owned_planes = true && that.isSetOwned_planes();
    if (this_present_owned_planes || that_present_owned_planes) {
      if (!(this_present_owned_planes && that_present_owned_planes))
        return false;
      if (!this.owned_planes.equals(that.owned_planes))
        return false;
    }

    boolean this_present_not_owned_planes = true && this.isSetNot_owned_planes();
    boolean that_present_not_owned_planes = true && that.isSetNot_owned_planes();
    if (this_present_not_owned_planes || that_present_not_owned_planes) {
      if (!(this_present_not_owned_planes && that_present_not_owned_planes))
        return false;
      if (!this.not_owned_planes.equals(that.not_owned_planes))
        return false;
    }

    boolean this_present_owned_bases = true && this.isSetOwned_bases();
    boolean that_present_owned_bases = true && that.isSetOwned_bases();
    if (this_present_owned_bases || that_present_owned_bases) {
      if (!(this_present_owned_bases && that_present_owned_bases))
        return false;
      if (!this.owned_bases.equals(that.owned_bases))
        return false;
    }

    boolean this_present_not_owned_bases = true && this.isSetNot_owned_bases();
    boolean that_present_not_owned_bases = true && that.isSetNot_owned_bases();
    if (this_present_not_owned_bases || that_present_not_owned_bases) {
      if (!(this_present_not_owned_bases && that_present_not_owned_bases))
        return false;
      if (!this.not_owned_bases.equals(that.not_owned_bases))
        return false;
    }

    boolean this_present_progressAxis = true && this.isSetProgressAxis();
    boolean that_present_progressAxis = true && that.isSetProgressAxis();
    if (this_present_progressAxis || that_present_progressAxis) {
      if (!(this_present_progressAxis && that_present_progressAxis))
        return false;
      if (!this.progressAxis.equals(that.progressAxis))
        return false;
    }

    boolean this_present_myCountry = true && this.isSetMyCountry();
    boolean that_present_myCountry = true && that.isSetMyCountry();
    if (this_present_myCountry || that_present_myCountry) {
      if (!(this_present_myCountry && that_present_myCountry))
        return false;
      if (!this.myCountry.equals(that.myCountry))
        return false;
    }

    boolean this_present_currentMoney = true;
    boolean that_present_currentMoney = true;
    if (this_present_currentMoney || that_present_currentMoney) {
      if (!(this_present_currentMoney && that_present_currentMoney))
        return false;
      if (this.currentMoney != that.currentMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Data other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNumFrame()).compareTo(other.isSetNumFrame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumFrame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numFrame, other.numFrame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwned_planes()).compareTo(other.isSetOwned_planes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwned_planes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owned_planes, other.owned_planes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNot_owned_planes()).compareTo(other.isSetNot_owned_planes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNot_owned_planes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.not_owned_planes, other.not_owned_planes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwned_bases()).compareTo(other.isSetOwned_bases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwned_bases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owned_bases, other.owned_bases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNot_owned_bases()).compareTo(other.isSetNot_owned_bases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNot_owned_bases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.not_owned_bases, other.not_owned_bases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgressAxis()).compareTo(other.isSetProgressAxis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgressAxis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progressAxis, other.progressAxis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyCountry()).compareTo(other.isSetMyCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myCountry, other.myCountry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentMoney()).compareTo(other.isSetCurrentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentMoney, other.currentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Data(");
    boolean first = true;

    sb.append("numFrame:");
    sb.append(this.numFrame);
    first = false;
    if (!first) sb.append(", ");
    sb.append("owned_planes:");
    if (this.owned_planes == null) {
      sb.append("null");
    } else {
      sb.append(this.owned_planes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("not_owned_planes:");
    if (this.not_owned_planes == null) {
      sb.append("null");
    } else {
      sb.append(this.not_owned_planes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owned_bases:");
    if (this.owned_bases == null) {
      sb.append("null");
    } else {
      sb.append(this.owned_bases);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("not_owned_bases:");
    if (this.not_owned_bases == null) {
      sb.append("null");
    } else {
      sb.append(this.not_owned_bases);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("progressAxis:");
    if (this.progressAxis == null) {
      sb.append("null");
    } else {
      sb.append(this.progressAxis);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myCountry:");
    if (this.myCountry == null) {
      sb.append("null");
    } else {
      sb.append(this.myCountry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentMoney:");
    sb.append(this.currentMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (myCountry != null) {
      myCountry.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataStandardSchemeFactory implements SchemeFactory {
    public DataStandardScheme getScheme() {
      return new DataStandardScheme();
    }
  }

  private static class DataStandardScheme extends StandardScheme<Data> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_FRAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numFrame = iprot.readI32();
              struct.setNumFrameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OWNED_PLANES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.owned_planes = new ArrayList<PlaneFullData>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  PlaneFullData _elem34;
                  _elem34 = new PlaneFullData();
                  _elem34.read(iprot);
                  struct.owned_planes.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setOwned_planesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOT_OWNED_PLANES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.not_owned_planes = new ArrayList<PlaneBasicData>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  PlaneBasicData _elem37;
                  _elem37 = new PlaneBasicData();
                  _elem37.read(iprot);
                  struct.not_owned_planes.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setNot_owned_planesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OWNED_BASES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.owned_bases = new ArrayList<BaseFullData>(_list38.size);
                for (int _i39 = 0; _i39 < _list38.size; ++_i39)
                {
                  BaseFullData _elem40;
                  _elem40 = new BaseFullData();
                  _elem40.read(iprot);
                  struct.owned_bases.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setOwned_basesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOT_OWNED_BASES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.not_owned_bases = new ArrayList<BaseBasicData>(_list41.size);
                for (int _i42 = 0; _i42 < _list41.size; ++_i42)
                {
                  BaseBasicData _elem43;
                  _elem43 = new BaseBasicData();
                  _elem43.read(iprot);
                  struct.not_owned_bases.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setNot_owned_basesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROGRESS_AXIS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.progressAxis = new ArrayList<ProgressAxisData>(_list44.size);
                for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                {
                  ProgressAxisData _elem46;
                  _elem46 = new ProgressAxisData();
                  _elem46.read(iprot);
                  struct.progressAxis.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setProgressAxisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MY_COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.myCountry = new CountryData();
              struct.myCountry.read(iprot);
              struct.setMyCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CURRENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentMoney = iprot.readI32();
              struct.setCurrentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Data struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_FRAME_FIELD_DESC);
      oprot.writeI32(struct.numFrame);
      oprot.writeFieldEnd();
      if (struct.owned_planes != null) {
        oprot.writeFieldBegin(OWNED_PLANES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.owned_planes.size()));
          for (PlaneFullData _iter47 : struct.owned_planes)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.not_owned_planes != null) {
        oprot.writeFieldBegin(NOT_OWNED_PLANES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.not_owned_planes.size()));
          for (PlaneBasicData _iter48 : struct.not_owned_planes)
          {
            _iter48.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.owned_bases != null) {
        oprot.writeFieldBegin(OWNED_BASES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.owned_bases.size()));
          for (BaseFullData _iter49 : struct.owned_bases)
          {
            _iter49.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.not_owned_bases != null) {
        oprot.writeFieldBegin(NOT_OWNED_BASES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.not_owned_bases.size()));
          for (BaseBasicData _iter50 : struct.not_owned_bases)
          {
            _iter50.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.progressAxis != null) {
        oprot.writeFieldBegin(PROGRESS_AXIS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.progressAxis.size()));
          for (ProgressAxisData _iter51 : struct.progressAxis)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.myCountry != null) {
        oprot.writeFieldBegin(MY_COUNTRY_FIELD_DESC);
        struct.myCountry.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURRENT_MONEY_FIELD_DESC);
      oprot.writeI32(struct.currentMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataTupleSchemeFactory implements SchemeFactory {
    public DataTupleScheme getScheme() {
      return new DataTupleScheme();
    }
  }

  private static class DataTupleScheme extends TupleScheme<Data> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Data struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNumFrame()) {
        optionals.set(0);
      }
      if (struct.isSetOwned_planes()) {
        optionals.set(1);
      }
      if (struct.isSetNot_owned_planes()) {
        optionals.set(2);
      }
      if (struct.isSetOwned_bases()) {
        optionals.set(3);
      }
      if (struct.isSetNot_owned_bases()) {
        optionals.set(4);
      }
      if (struct.isSetProgressAxis()) {
        optionals.set(5);
      }
      if (struct.isSetMyCountry()) {
        optionals.set(6);
      }
      if (struct.isSetCurrentMoney()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetNumFrame()) {
        oprot.writeI32(struct.numFrame);
      }
      if (struct.isSetOwned_planes()) {
        {
          oprot.writeI32(struct.owned_planes.size());
          for (PlaneFullData _iter52 : struct.owned_planes)
          {
            _iter52.write(oprot);
          }
        }
      }
      if (struct.isSetNot_owned_planes()) {
        {
          oprot.writeI32(struct.not_owned_planes.size());
          for (PlaneBasicData _iter53 : struct.not_owned_planes)
          {
            _iter53.write(oprot);
          }
        }
      }
      if (struct.isSetOwned_bases()) {
        {
          oprot.writeI32(struct.owned_bases.size());
          for (BaseFullData _iter54 : struct.owned_bases)
          {
            _iter54.write(oprot);
          }
        }
      }
      if (struct.isSetNot_owned_bases()) {
        {
          oprot.writeI32(struct.not_owned_bases.size());
          for (BaseBasicData _iter55 : struct.not_owned_bases)
          {
            _iter55.write(oprot);
          }
        }
      }
      if (struct.isSetProgressAxis()) {
        {
          oprot.writeI32(struct.progressAxis.size());
          for (ProgressAxisData _iter56 : struct.progressAxis)
          {
            _iter56.write(oprot);
          }
        }
      }
      if (struct.isSetMyCountry()) {
        struct.myCountry.write(oprot);
      }
      if (struct.isSetCurrentMoney()) {
        oprot.writeI32(struct.currentMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Data struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.numFrame = iprot.readI32();
        struct.setNumFrameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.owned_planes = new ArrayList<PlaneFullData>(_list57.size);
          for (int _i58 = 0; _i58 < _list57.size; ++_i58)
          {
            PlaneFullData _elem59;
            _elem59 = new PlaneFullData();
            _elem59.read(iprot);
            struct.owned_planes.add(_elem59);
          }
        }
        struct.setOwned_planesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.not_owned_planes = new ArrayList<PlaneBasicData>(_list60.size);
          for (int _i61 = 0; _i61 < _list60.size; ++_i61)
          {
            PlaneBasicData _elem62;
            _elem62 = new PlaneBasicData();
            _elem62.read(iprot);
            struct.not_owned_planes.add(_elem62);
          }
        }
        struct.setNot_owned_planesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.owned_bases = new ArrayList<BaseFullData>(_list63.size);
          for (int _i64 = 0; _i64 < _list63.size; ++_i64)
          {
            BaseFullData _elem65;
            _elem65 = new BaseFullData();
            _elem65.read(iprot);
            struct.owned_bases.add(_elem65);
          }
        }
        struct.setOwned_basesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.not_owned_bases = new ArrayList<BaseBasicData>(_list66.size);
          for (int _i67 = 0; _i67 < _list66.size; ++_i67)
          {
            BaseBasicData _elem68;
            _elem68 = new BaseBasicData();
            _elem68.read(iprot);
            struct.not_owned_bases.add(_elem68);
          }
        }
        struct.setNot_owned_basesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.progressAxis = new ArrayList<ProgressAxisData>(_list69.size);
          for (int _i70 = 0; _i70 < _list69.size; ++_i70)
          {
            ProgressAxisData _elem71;
            _elem71 = new ProgressAxisData();
            _elem71.read(iprot);
            struct.progressAxis.add(_elem71);
          }
        }
        struct.setProgressAxisIsSet(true);
      }
      if (incoming.get(6)) {
        struct.myCountry = new CountryData();
        struct.myCountry.read(iprot);
        struct.setMyCountryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.currentMoney = iprot.readI32();
        struct.setCurrentMoneyIsSet(true);
      }
    }
  }

}

