/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package genbridge;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProductionLineData implements org.apache.thrift.TBase<ProductionLineData, ProductionLineData._Fields>, java.io.Serializable, Cloneable, Comparable<ProductionLineData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductionLineData");

  private static final org.apache.thrift.protocol.TField TIME_BEFORE_PLANE_BUILT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeBeforePlaneBuilt", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField PLANE_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("planeTypeId", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductionLineDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductionLineDataTupleSchemeFactory());
  }

  public double timeBeforePlaneBuilt; // required
  public int planeTypeId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME_BEFORE_PLANE_BUILT((short)1, "timeBeforePlaneBuilt"),
    PLANE_TYPE_ID((short)2, "planeTypeId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME_BEFORE_PLANE_BUILT
          return TIME_BEFORE_PLANE_BUILT;
        case 2: // PLANE_TYPE_ID
          return PLANE_TYPE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMEBEFOREPLANEBUILT_ISSET_ID = 0;
  private static final int __PLANETYPEID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME_BEFORE_PLANE_BUILT, new org.apache.thrift.meta_data.FieldMetaData("timeBeforePlaneBuilt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLANE_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("planeTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductionLineData.class, metaDataMap);
  }

  public ProductionLineData() {
  }

  public ProductionLineData(
    double timeBeforePlaneBuilt,
    int planeTypeId)
  {
    this();
    this.timeBeforePlaneBuilt = timeBeforePlaneBuilt;
    setTimeBeforePlaneBuiltIsSet(true);
    this.planeTypeId = planeTypeId;
    setPlaneTypeIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductionLineData(ProductionLineData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timeBeforePlaneBuilt = other.timeBeforePlaneBuilt;
    this.planeTypeId = other.planeTypeId;
  }

  public ProductionLineData deepCopy() {
    return new ProductionLineData(this);
  }

  @Override
  public void clear() {
    setTimeBeforePlaneBuiltIsSet(false);
    this.timeBeforePlaneBuilt = 0.0;
    setPlaneTypeIdIsSet(false);
    this.planeTypeId = 0;
  }

  public double getTimeBeforePlaneBuilt() {
    return this.timeBeforePlaneBuilt;
  }

  public ProductionLineData setTimeBeforePlaneBuilt(double timeBeforePlaneBuilt) {
    this.timeBeforePlaneBuilt = timeBeforePlaneBuilt;
    setTimeBeforePlaneBuiltIsSet(true);
    return this;
  }

  public void unsetTimeBeforePlaneBuilt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEBEFOREPLANEBUILT_ISSET_ID);
  }

  /** Returns true if field timeBeforePlaneBuilt is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeBeforePlaneBuilt() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEBEFOREPLANEBUILT_ISSET_ID);
  }

  public void setTimeBeforePlaneBuiltIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEBEFOREPLANEBUILT_ISSET_ID, value);
  }

  public int getPlaneTypeId() {
    return this.planeTypeId;
  }

  public ProductionLineData setPlaneTypeId(int planeTypeId) {
    this.planeTypeId = planeTypeId;
    setPlaneTypeIdIsSet(true);
    return this;
  }

  public void unsetPlaneTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANETYPEID_ISSET_ID);
  }

  /** Returns true if field planeTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlaneTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANETYPEID_ISSET_ID);
  }

  public void setPlaneTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANETYPEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME_BEFORE_PLANE_BUILT:
      if (value == null) {
        unsetTimeBeforePlaneBuilt();
      } else {
        setTimeBeforePlaneBuilt((Double)value);
      }
      break;

    case PLANE_TYPE_ID:
      if (value == null) {
        unsetPlaneTypeId();
      } else {
        setPlaneTypeId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME_BEFORE_PLANE_BUILT:
      return Double.valueOf(getTimeBeforePlaneBuilt());

    case PLANE_TYPE_ID:
      return Integer.valueOf(getPlaneTypeId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME_BEFORE_PLANE_BUILT:
      return isSetTimeBeforePlaneBuilt();
    case PLANE_TYPE_ID:
      return isSetPlaneTypeId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductionLineData)
      return this.equals((ProductionLineData)that);
    return false;
  }

  public boolean equals(ProductionLineData that) {
    if (that == null)
      return false;

    boolean this_present_timeBeforePlaneBuilt = true;
    boolean that_present_timeBeforePlaneBuilt = true;
    if (this_present_timeBeforePlaneBuilt || that_present_timeBeforePlaneBuilt) {
      if (!(this_present_timeBeforePlaneBuilt && that_present_timeBeforePlaneBuilt))
        return false;
      if (this.timeBeforePlaneBuilt != that.timeBeforePlaneBuilt)
        return false;
    }

    boolean this_present_planeTypeId = true;
    boolean that_present_planeTypeId = true;
    if (this_present_planeTypeId || that_present_planeTypeId) {
      if (!(this_present_planeTypeId && that_present_planeTypeId))
        return false;
      if (this.planeTypeId != that.planeTypeId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ProductionLineData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimeBeforePlaneBuilt()).compareTo(other.isSetTimeBeforePlaneBuilt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeBeforePlaneBuilt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeBeforePlaneBuilt, other.timeBeforePlaneBuilt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlaneTypeId()).compareTo(other.isSetPlaneTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlaneTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planeTypeId, other.planeTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductionLineData(");
    boolean first = true;

    sb.append("timeBeforePlaneBuilt:");
    sb.append(this.timeBeforePlaneBuilt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planeTypeId:");
    sb.append(this.planeTypeId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductionLineDataStandardSchemeFactory implements SchemeFactory {
    public ProductionLineDataStandardScheme getScheme() {
      return new ProductionLineDataStandardScheme();
    }
  }

  private static class ProductionLineDataStandardScheme extends StandardScheme<ProductionLineData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductionLineData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME_BEFORE_PLANE_BUILT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.timeBeforePlaneBuilt = iprot.readDouble();
              struct.setTimeBeforePlaneBuiltIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLANE_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planeTypeId = iprot.readI32();
              struct.setPlaneTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductionLineData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIME_BEFORE_PLANE_BUILT_FIELD_DESC);
      oprot.writeDouble(struct.timeBeforePlaneBuilt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLANE_TYPE_ID_FIELD_DESC);
      oprot.writeI32(struct.planeTypeId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductionLineDataTupleSchemeFactory implements SchemeFactory {
    public ProductionLineDataTupleScheme getScheme() {
      return new ProductionLineDataTupleScheme();
    }
  }

  private static class ProductionLineDataTupleScheme extends TupleScheme<ProductionLineData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductionLineData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTimeBeforePlaneBuilt()) {
        optionals.set(0);
      }
      if (struct.isSetPlaneTypeId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTimeBeforePlaneBuilt()) {
        oprot.writeDouble(struct.timeBeforePlaneBuilt);
      }
      if (struct.isSetPlaneTypeId()) {
        oprot.writeI32(struct.planeTypeId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductionLineData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.timeBeforePlaneBuilt = iprot.readDouble();
        struct.setTimeBeforePlaneBuiltIsSet(true);
      }
      if (incoming.get(1)) {
        struct.planeTypeId = iprot.readI32();
        struct.setPlaneTypeIdIsSet(true);
      }
    }
  }

}

