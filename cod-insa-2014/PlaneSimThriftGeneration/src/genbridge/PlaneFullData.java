/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package genbridge;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PlaneFullData implements org.apache.thrift.TBase<PlaneFullData, PlaneFullData._Fields>, java.io.Serializable, Cloneable, Comparable<PlaneFullData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlaneFullData");

  private static final org.apache.thrift.protocol.TField BASIC_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("basic_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("base_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REMAINING_GAZ_FIELD_DESC = new org.apache.thrift.protocol.TField("remainingGaz", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MILITAR_RESOURCE_CARRIED_FIELD_DESC = new org.apache.thrift.protocol.TField("militarResourceCarried", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField FUEL_RESOURCE_CARRIED_FIELD_DESC = new org.apache.thrift.protocol.TField("fuelResourceCarried", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CAPACITY_HOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("capacityHold", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CAPACITY_TANK_FIELD_DESC = new org.apache.thrift.protocol.TField("capacityTank", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlaneFullDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlaneFullDataTupleSchemeFactory());
  }

  public PlaneBasicData basic_info; // required
  public int base_id; // required
  public double remainingGaz; // required
  /**
   * 
   * @see PlaneStateData
   */
  public PlaneStateData state; // required
  public double militarResourceCarried; // required
  public double fuelResourceCarried; // required
  public double capacityHold; // required
  public double capacityTank; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BASIC_INFO((short)1, "basic_info"),
    BASE_ID((short)2, "base_id"),
    REMAINING_GAZ((short)3, "remainingGaz"),
    /**
     * 
     * @see PlaneStateData
     */
    STATE((short)4, "state"),
    MILITAR_RESOURCE_CARRIED((short)5, "militarResourceCarried"),
    FUEL_RESOURCE_CARRIED((short)6, "fuelResourceCarried"),
    CAPACITY_HOLD((short)7, "capacityHold"),
    CAPACITY_TANK((short)8, "capacityTank");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BASIC_INFO
          return BASIC_INFO;
        case 2: // BASE_ID
          return BASE_ID;
        case 3: // REMAINING_GAZ
          return REMAINING_GAZ;
        case 4: // STATE
          return STATE;
        case 5: // MILITAR_RESOURCE_CARRIED
          return MILITAR_RESOURCE_CARRIED;
        case 6: // FUEL_RESOURCE_CARRIED
          return FUEL_RESOURCE_CARRIED;
        case 7: // CAPACITY_HOLD
          return CAPACITY_HOLD;
        case 8: // CAPACITY_TANK
          return CAPACITY_TANK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BASE_ID_ISSET_ID = 0;
  private static final int __REMAININGGAZ_ISSET_ID = 1;
  private static final int __MILITARRESOURCECARRIED_ISSET_ID = 2;
  private static final int __FUELRESOURCECARRIED_ISSET_ID = 3;
  private static final int __CAPACITYHOLD_ISSET_ID = 4;
  private static final int __CAPACITYTANK_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BASIC_INFO, new org.apache.thrift.meta_data.FieldMetaData("basic_info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlaneBasicData.class)));
    tmpMap.put(_Fields.BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("base_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.REMAINING_GAZ, new org.apache.thrift.meta_data.FieldMetaData("remainingGaz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PlaneStateData.class)));
    tmpMap.put(_Fields.MILITAR_RESOURCE_CARRIED, new org.apache.thrift.meta_data.FieldMetaData("militarResourceCarried", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FUEL_RESOURCE_CARRIED, new org.apache.thrift.meta_data.FieldMetaData("fuelResourceCarried", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CAPACITY_HOLD, new org.apache.thrift.meta_data.FieldMetaData("capacityHold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CAPACITY_TANK, new org.apache.thrift.meta_data.FieldMetaData("capacityTank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlaneFullData.class, metaDataMap);
  }

  public PlaneFullData() {
  }

  public PlaneFullData(
    PlaneBasicData basic_info,
    int base_id,
    double remainingGaz,
    PlaneStateData state,
    double militarResourceCarried,
    double fuelResourceCarried,
    double capacityHold,
    double capacityTank)
  {
    this();
    this.basic_info = basic_info;
    this.base_id = base_id;
    setBase_idIsSet(true);
    this.remainingGaz = remainingGaz;
    setRemainingGazIsSet(true);
    this.state = state;
    this.militarResourceCarried = militarResourceCarried;
    setMilitarResourceCarriedIsSet(true);
    this.fuelResourceCarried = fuelResourceCarried;
    setFuelResourceCarriedIsSet(true);
    this.capacityHold = capacityHold;
    setCapacityHoldIsSet(true);
    this.capacityTank = capacityTank;
    setCapacityTankIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlaneFullData(PlaneFullData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBasic_info()) {
      this.basic_info = new PlaneBasicData(other.basic_info);
    }
    this.base_id = other.base_id;
    this.remainingGaz = other.remainingGaz;
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.militarResourceCarried = other.militarResourceCarried;
    this.fuelResourceCarried = other.fuelResourceCarried;
    this.capacityHold = other.capacityHold;
    this.capacityTank = other.capacityTank;
  }

  public PlaneFullData deepCopy() {
    return new PlaneFullData(this);
  }

  @Override
  public void clear() {
    this.basic_info = null;
    setBase_idIsSet(false);
    this.base_id = 0;
    setRemainingGazIsSet(false);
    this.remainingGaz = 0.0;
    this.state = null;
    setMilitarResourceCarriedIsSet(false);
    this.militarResourceCarried = 0.0;
    setFuelResourceCarriedIsSet(false);
    this.fuelResourceCarried = 0.0;
    setCapacityHoldIsSet(false);
    this.capacityHold = 0.0;
    setCapacityTankIsSet(false);
    this.capacityTank = 0.0;
  }

  public PlaneBasicData getBasic_info() {
    return this.basic_info;
  }

  public PlaneFullData setBasic_info(PlaneBasicData basic_info) {
    this.basic_info = basic_info;
    return this;
  }

  public void unsetBasic_info() {
    this.basic_info = null;
  }

  /** Returns true if field basic_info is set (has been assigned a value) and false otherwise */
  public boolean isSetBasic_info() {
    return this.basic_info != null;
  }

  public void setBasic_infoIsSet(boolean value) {
    if (!value) {
      this.basic_info = null;
    }
  }

  public int getBase_id() {
    return this.base_id;
  }

  public PlaneFullData setBase_id(int base_id) {
    this.base_id = base_id;
    setBase_idIsSet(true);
    return this;
  }

  public void unsetBase_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASE_ID_ISSET_ID);
  }

  /** Returns true if field base_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBase_id() {
    return EncodingUtils.testBit(__isset_bitfield, __BASE_ID_ISSET_ID);
  }

  public void setBase_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASE_ID_ISSET_ID, value);
  }

  public double getRemainingGaz() {
    return this.remainingGaz;
  }

  public PlaneFullData setRemainingGaz(double remainingGaz) {
    this.remainingGaz = remainingGaz;
    setRemainingGazIsSet(true);
    return this;
  }

  public void unsetRemainingGaz() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAININGGAZ_ISSET_ID);
  }

  /** Returns true if field remainingGaz is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainingGaz() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAININGGAZ_ISSET_ID);
  }

  public void setRemainingGazIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAININGGAZ_ISSET_ID, value);
  }

  /**
   * 
   * @see PlaneStateData
   */
  public PlaneStateData getState() {
    return this.state;
  }

  /**
   * 
   * @see PlaneStateData
   */
  public PlaneFullData setState(PlaneStateData state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public double getMilitarResourceCarried() {
    return this.militarResourceCarried;
  }

  public PlaneFullData setMilitarResourceCarried(double militarResourceCarried) {
    this.militarResourceCarried = militarResourceCarried;
    setMilitarResourceCarriedIsSet(true);
    return this;
  }

  public void unsetMilitarResourceCarried() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MILITARRESOURCECARRIED_ISSET_ID);
  }

  /** Returns true if field militarResourceCarried is set (has been assigned a value) and false otherwise */
  public boolean isSetMilitarResourceCarried() {
    return EncodingUtils.testBit(__isset_bitfield, __MILITARRESOURCECARRIED_ISSET_ID);
  }

  public void setMilitarResourceCarriedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MILITARRESOURCECARRIED_ISSET_ID, value);
  }

  public double getFuelResourceCarried() {
    return this.fuelResourceCarried;
  }

  public PlaneFullData setFuelResourceCarried(double fuelResourceCarried) {
    this.fuelResourceCarried = fuelResourceCarried;
    setFuelResourceCarriedIsSet(true);
    return this;
  }

  public void unsetFuelResourceCarried() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUELRESOURCECARRIED_ISSET_ID);
  }

  /** Returns true if field fuelResourceCarried is set (has been assigned a value) and false otherwise */
  public boolean isSetFuelResourceCarried() {
    return EncodingUtils.testBit(__isset_bitfield, __FUELRESOURCECARRIED_ISSET_ID);
  }

  public void setFuelResourceCarriedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUELRESOURCECARRIED_ISSET_ID, value);
  }

  public double getCapacityHold() {
    return this.capacityHold;
  }

  public PlaneFullData setCapacityHold(double capacityHold) {
    this.capacityHold = capacityHold;
    setCapacityHoldIsSet(true);
    return this;
  }

  public void unsetCapacityHold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAPACITYHOLD_ISSET_ID);
  }

  /** Returns true if field capacityHold is set (has been assigned a value) and false otherwise */
  public boolean isSetCapacityHold() {
    return EncodingUtils.testBit(__isset_bitfield, __CAPACITYHOLD_ISSET_ID);
  }

  public void setCapacityHoldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAPACITYHOLD_ISSET_ID, value);
  }

  public double getCapacityTank() {
    return this.capacityTank;
  }

  public PlaneFullData setCapacityTank(double capacityTank) {
    this.capacityTank = capacityTank;
    setCapacityTankIsSet(true);
    return this;
  }

  public void unsetCapacityTank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAPACITYTANK_ISSET_ID);
  }

  /** Returns true if field capacityTank is set (has been assigned a value) and false otherwise */
  public boolean isSetCapacityTank() {
    return EncodingUtils.testBit(__isset_bitfield, __CAPACITYTANK_ISSET_ID);
  }

  public void setCapacityTankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAPACITYTANK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BASIC_INFO:
      if (value == null) {
        unsetBasic_info();
      } else {
        setBasic_info((PlaneBasicData)value);
      }
      break;

    case BASE_ID:
      if (value == null) {
        unsetBase_id();
      } else {
        setBase_id((Integer)value);
      }
      break;

    case REMAINING_GAZ:
      if (value == null) {
        unsetRemainingGaz();
      } else {
        setRemainingGaz((Double)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((PlaneStateData)value);
      }
      break;

    case MILITAR_RESOURCE_CARRIED:
      if (value == null) {
        unsetMilitarResourceCarried();
      } else {
        setMilitarResourceCarried((Double)value);
      }
      break;

    case FUEL_RESOURCE_CARRIED:
      if (value == null) {
        unsetFuelResourceCarried();
      } else {
        setFuelResourceCarried((Double)value);
      }
      break;

    case CAPACITY_HOLD:
      if (value == null) {
        unsetCapacityHold();
      } else {
        setCapacityHold((Double)value);
      }
      break;

    case CAPACITY_TANK:
      if (value == null) {
        unsetCapacityTank();
      } else {
        setCapacityTank((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BASIC_INFO:
      return getBasic_info();

    case BASE_ID:
      return Integer.valueOf(getBase_id());

    case REMAINING_GAZ:
      return Double.valueOf(getRemainingGaz());

    case STATE:
      return getState();

    case MILITAR_RESOURCE_CARRIED:
      return Double.valueOf(getMilitarResourceCarried());

    case FUEL_RESOURCE_CARRIED:
      return Double.valueOf(getFuelResourceCarried());

    case CAPACITY_HOLD:
      return Double.valueOf(getCapacityHold());

    case CAPACITY_TANK:
      return Double.valueOf(getCapacityTank());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BASIC_INFO:
      return isSetBasic_info();
    case BASE_ID:
      return isSetBase_id();
    case REMAINING_GAZ:
      return isSetRemainingGaz();
    case STATE:
      return isSetState();
    case MILITAR_RESOURCE_CARRIED:
      return isSetMilitarResourceCarried();
    case FUEL_RESOURCE_CARRIED:
      return isSetFuelResourceCarried();
    case CAPACITY_HOLD:
      return isSetCapacityHold();
    case CAPACITY_TANK:
      return isSetCapacityTank();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlaneFullData)
      return this.equals((PlaneFullData)that);
    return false;
  }

  public boolean equals(PlaneFullData that) {
    if (that == null)
      return false;

    boolean this_present_basic_info = true && this.isSetBasic_info();
    boolean that_present_basic_info = true && that.isSetBasic_info();
    if (this_present_basic_info || that_present_basic_info) {
      if (!(this_present_basic_info && that_present_basic_info))
        return false;
      if (!this.basic_info.equals(that.basic_info))
        return false;
    }

    boolean this_present_base_id = true;
    boolean that_present_base_id = true;
    if (this_present_base_id || that_present_base_id) {
      if (!(this_present_base_id && that_present_base_id))
        return false;
      if (this.base_id != that.base_id)
        return false;
    }

    boolean this_present_remainingGaz = true;
    boolean that_present_remainingGaz = true;
    if (this_present_remainingGaz || that_present_remainingGaz) {
      if (!(this_present_remainingGaz && that_present_remainingGaz))
        return false;
      if (this.remainingGaz != that.remainingGaz)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_militarResourceCarried = true;
    boolean that_present_militarResourceCarried = true;
    if (this_present_militarResourceCarried || that_present_militarResourceCarried) {
      if (!(this_present_militarResourceCarried && that_present_militarResourceCarried))
        return false;
      if (this.militarResourceCarried != that.militarResourceCarried)
        return false;
    }

    boolean this_present_fuelResourceCarried = true;
    boolean that_present_fuelResourceCarried = true;
    if (this_present_fuelResourceCarried || that_present_fuelResourceCarried) {
      if (!(this_present_fuelResourceCarried && that_present_fuelResourceCarried))
        return false;
      if (this.fuelResourceCarried != that.fuelResourceCarried)
        return false;
    }

    boolean this_present_capacityHold = true;
    boolean that_present_capacityHold = true;
    if (this_present_capacityHold || that_present_capacityHold) {
      if (!(this_present_capacityHold && that_present_capacityHold))
        return false;
      if (this.capacityHold != that.capacityHold)
        return false;
    }

    boolean this_present_capacityTank = true;
    boolean that_present_capacityTank = true;
    if (this_present_capacityTank || that_present_capacityTank) {
      if (!(this_present_capacityTank && that_present_capacityTank))
        return false;
      if (this.capacityTank != that.capacityTank)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PlaneFullData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBasic_info()).compareTo(other.isSetBasic_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasic_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basic_info, other.basic_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBase_id()).compareTo(other.isSetBase_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_id, other.base_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainingGaz()).compareTo(other.isSetRemainingGaz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainingGaz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainingGaz, other.remainingGaz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMilitarResourceCarried()).compareTo(other.isSetMilitarResourceCarried());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMilitarResourceCarried()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.militarResourceCarried, other.militarResourceCarried);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFuelResourceCarried()).compareTo(other.isSetFuelResourceCarried());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuelResourceCarried()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fuelResourceCarried, other.fuelResourceCarried);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCapacityHold()).compareTo(other.isSetCapacityHold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapacityHold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capacityHold, other.capacityHold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCapacityTank()).compareTo(other.isSetCapacityTank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapacityTank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capacityTank, other.capacityTank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlaneFullData(");
    boolean first = true;

    sb.append("basic_info:");
    if (this.basic_info == null) {
      sb.append("null");
    } else {
      sb.append(this.basic_info);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("base_id:");
    sb.append(this.base_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainingGaz:");
    sb.append(this.remainingGaz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("militarResourceCarried:");
    sb.append(this.militarResourceCarried);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fuelResourceCarried:");
    sb.append(this.fuelResourceCarried);
    first = false;
    if (!first) sb.append(", ");
    sb.append("capacityHold:");
    sb.append(this.capacityHold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("capacityTank:");
    sb.append(this.capacityTank);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (basic_info != null) {
      basic_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlaneFullDataStandardSchemeFactory implements SchemeFactory {
    public PlaneFullDataStandardScheme getScheme() {
      return new PlaneFullDataStandardScheme();
    }
  }

  private static class PlaneFullDataStandardScheme extends StandardScheme<PlaneFullData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlaneFullData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BASIC_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.basic_info = new PlaneBasicData();
              struct.basic_info.read(iprot);
              struct.setBasic_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.base_id = iprot.readI32();
              struct.setBase_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMAINING_GAZ
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.remainingGaz = iprot.readDouble();
              struct.setRemainingGazIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = PlaneStateData.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MILITAR_RESOURCE_CARRIED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.militarResourceCarried = iprot.readDouble();
              struct.setMilitarResourceCarriedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FUEL_RESOURCE_CARRIED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fuelResourceCarried = iprot.readDouble();
              struct.setFuelResourceCarriedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CAPACITY_HOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.capacityHold = iprot.readDouble();
              struct.setCapacityHoldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CAPACITY_TANK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.capacityTank = iprot.readDouble();
              struct.setCapacityTankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlaneFullData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.basic_info != null) {
        oprot.writeFieldBegin(BASIC_INFO_FIELD_DESC);
        struct.basic_info.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BASE_ID_FIELD_DESC);
      oprot.writeI32(struct.base_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAINING_GAZ_FIELD_DESC);
      oprot.writeDouble(struct.remainingGaz);
      oprot.writeFieldEnd();
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MILITAR_RESOURCE_CARRIED_FIELD_DESC);
      oprot.writeDouble(struct.militarResourceCarried);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FUEL_RESOURCE_CARRIED_FIELD_DESC);
      oprot.writeDouble(struct.fuelResourceCarried);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAPACITY_HOLD_FIELD_DESC);
      oprot.writeDouble(struct.capacityHold);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAPACITY_TANK_FIELD_DESC);
      oprot.writeDouble(struct.capacityTank);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlaneFullDataTupleSchemeFactory implements SchemeFactory {
    public PlaneFullDataTupleScheme getScheme() {
      return new PlaneFullDataTupleScheme();
    }
  }

  private static class PlaneFullDataTupleScheme extends TupleScheme<PlaneFullData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlaneFullData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBasic_info()) {
        optionals.set(0);
      }
      if (struct.isSetBase_id()) {
        optionals.set(1);
      }
      if (struct.isSetRemainingGaz()) {
        optionals.set(2);
      }
      if (struct.isSetState()) {
        optionals.set(3);
      }
      if (struct.isSetMilitarResourceCarried()) {
        optionals.set(4);
      }
      if (struct.isSetFuelResourceCarried()) {
        optionals.set(5);
      }
      if (struct.isSetCapacityHold()) {
        optionals.set(6);
      }
      if (struct.isSetCapacityTank()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetBasic_info()) {
        struct.basic_info.write(oprot);
      }
      if (struct.isSetBase_id()) {
        oprot.writeI32(struct.base_id);
      }
      if (struct.isSetRemainingGaz()) {
        oprot.writeDouble(struct.remainingGaz);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetMilitarResourceCarried()) {
        oprot.writeDouble(struct.militarResourceCarried);
      }
      if (struct.isSetFuelResourceCarried()) {
        oprot.writeDouble(struct.fuelResourceCarried);
      }
      if (struct.isSetCapacityHold()) {
        oprot.writeDouble(struct.capacityHold);
      }
      if (struct.isSetCapacityTank()) {
        oprot.writeDouble(struct.capacityTank);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlaneFullData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.basic_info = new PlaneBasicData();
        struct.basic_info.read(iprot);
        struct.setBasic_infoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.base_id = iprot.readI32();
        struct.setBase_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.remainingGaz = iprot.readDouble();
        struct.setRemainingGazIsSet(true);
      }
      if (incoming.get(3)) {
        struct.state = PlaneStateData.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.militarResourceCarried = iprot.readDouble();
        struct.setMilitarResourceCarriedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fuelResourceCarried = iprot.readDouble();
        struct.setFuelResourceCarriedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.capacityHold = iprot.readDouble();
        struct.setCapacityHoldIsSet(true);
      }
      if (incoming.get(7)) {
        struct.capacityTank = iprot.readDouble();
        struct.setCapacityTankIsSet(true);
      }
    }
  }

}

