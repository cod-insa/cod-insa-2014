#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PlaneStateData:
  IDLE = 1
  GOING_TO = 2
  FOLLOWING = 3
  ATTACKING = 4
  LANDING = 5
  AT_AIRPORT = 6
  DEAD = 7

  _VALUES_TO_NAMES = {
    1: "IDLE",
    2: "GOING_TO",
    3: "FOLLOWING",
    4: "ATTACKING",
    5: "LANDING",
    6: "AT_AIRPORT",
    7: "DEAD",
  }

  _NAMES_TO_VALUES = {
    "IDLE": 1,
    "GOING_TO": 2,
    "FOLLOWING": 3,
    "ATTACKING": 4,
    "LANDING": 5,
    "AT_AIRPORT": 6,
    "DEAD": 7,
  }


class CoordData:
  """
  Attributes:
   - x
   - y
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'x', None, None, ), # 1
    (2, TType.DOUBLE, 'y', None, None, ), # 2
  )

  def __init__(self, x=None, y=None,):
    self.x = x
    self.y = y

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.x = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.y = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CoordData')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.DOUBLE, 1)
      oprot.writeDouble(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.DOUBLE, 2)
      oprot.writeDouble(self.y)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlaneBasicData:
  """
  Attributes:
   - plane_id
   - posit
   - ai_id
   - health
   - canAttack
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'plane_id', None, None, ), # 1
    (2, TType.STRUCT, 'posit', (CoordData, CoordData.thrift_spec), None, ), # 2
    (3, TType.I32, 'ai_id', None, None, ), # 3
    (4, TType.DOUBLE, 'health', None, None, ), # 4
    (5, TType.BOOL, 'canAttack', None, None, ), # 5
  )

  def __init__(self, plane_id=None, posit=None, ai_id=None, health=None, canAttack=None,):
    self.plane_id = plane_id
    self.posit = posit
    self.ai_id = ai_id
    self.health = health
    self.canAttack = canAttack

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.plane_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.posit = CoordData()
          self.posit.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.ai_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.health = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.canAttack = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlaneBasicData')
    if self.plane_id is not None:
      oprot.writeFieldBegin('plane_id', TType.I32, 1)
      oprot.writeI32(self.plane_id)
      oprot.writeFieldEnd()
    if self.posit is not None:
      oprot.writeFieldBegin('posit', TType.STRUCT, 2)
      self.posit.write(oprot)
      oprot.writeFieldEnd()
    if self.ai_id is not None:
      oprot.writeFieldBegin('ai_id', TType.I32, 3)
      oprot.writeI32(self.ai_id)
      oprot.writeFieldEnd()
    if self.health is not None:
      oprot.writeFieldBegin('health', TType.DOUBLE, 4)
      oprot.writeDouble(self.health)
      oprot.writeFieldEnd()
    if self.canAttack is not None:
      oprot.writeFieldBegin('canAttack', TType.BOOL, 5)
      oprot.writeBool(self.canAttack)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlaneFullData:
  """
  Attributes:
   - basic_info
   - base_id
   - remainingGaz
   - state
   - militarResourceCarried
   - fuelResourceCarried
   - capacityHold
   - capacityTank
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'basic_info', (PlaneBasicData, PlaneBasicData.thrift_spec), None, ), # 1
    (2, TType.I32, 'base_id', None, None, ), # 2
    (3, TType.DOUBLE, 'remainingGaz', None, None, ), # 3
    (4, TType.I32, 'state', None, None, ), # 4
    (5, TType.DOUBLE, 'militarResourceCarried', None, None, ), # 5
    (6, TType.DOUBLE, 'fuelResourceCarried', None, None, ), # 6
    (7, TType.DOUBLE, 'capacityHold', None, None, ), # 7
    (8, TType.DOUBLE, 'capacityTank', None, None, ), # 8
  )

  def __init__(self, basic_info=None, base_id=None, remainingGaz=None, state=None, militarResourceCarried=None, fuelResourceCarried=None, capacityHold=None, capacityTank=None,):
    self.basic_info = basic_info
    self.base_id = base_id
    self.remainingGaz = remainingGaz
    self.state = state
    self.militarResourceCarried = militarResourceCarried
    self.fuelResourceCarried = fuelResourceCarried
    self.capacityHold = capacityHold
    self.capacityTank = capacityTank

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.basic_info = PlaneBasicData()
          self.basic_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.base_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.remainingGaz = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.militarResourceCarried = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.fuelResourceCarried = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.capacityHold = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.capacityTank = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlaneFullData')
    if self.basic_info is not None:
      oprot.writeFieldBegin('basic_info', TType.STRUCT, 1)
      self.basic_info.write(oprot)
      oprot.writeFieldEnd()
    if self.base_id is not None:
      oprot.writeFieldBegin('base_id', TType.I32, 2)
      oprot.writeI32(self.base_id)
      oprot.writeFieldEnd()
    if self.remainingGaz is not None:
      oprot.writeFieldBegin('remainingGaz', TType.DOUBLE, 3)
      oprot.writeDouble(self.remainingGaz)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 4)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.militarResourceCarried is not None:
      oprot.writeFieldBegin('militarResourceCarried', TType.DOUBLE, 5)
      oprot.writeDouble(self.militarResourceCarried)
      oprot.writeFieldEnd()
    if self.fuelResourceCarried is not None:
      oprot.writeFieldBegin('fuelResourceCarried', TType.DOUBLE, 6)
      oprot.writeDouble(self.fuelResourceCarried)
      oprot.writeFieldEnd()
    if self.capacityHold is not None:
      oprot.writeFieldBegin('capacityHold', TType.DOUBLE, 7)
      oprot.writeDouble(self.capacityHold)
      oprot.writeFieldEnd()
    if self.capacityTank is not None:
      oprot.writeFieldBegin('capacityTank', TType.DOUBLE, 8)
      oprot.writeDouble(self.capacityTank)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BaseBasicData:
  """
  Attributes:
   - base_id
   - ai_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'base_id', None, None, ), # 1
    (2, TType.I32, 'ai_id', None, None, ), # 2
  )

  def __init__(self, base_id=None, ai_id=None,):
    self.base_id = base_id
    self.ai_id = ai_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.base_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ai_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BaseBasicData')
    if self.base_id is not None:
      oprot.writeFieldBegin('base_id', TType.I32, 1)
      oprot.writeI32(self.base_id)
      oprot.writeFieldEnd()
    if self.ai_id is not None:
      oprot.writeFieldBegin('ai_id', TType.I32, 2)
      oprot.writeI32(self.ai_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BaseFullData:
  """
  Attributes:
   - basic_info
   - militarRessource
   - fuelRessource
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'basic_info', (BaseBasicData, BaseBasicData.thrift_spec), None, ), # 1
    (2, TType.DOUBLE, 'militarRessource', None, None, ), # 2
    (3, TType.DOUBLE, 'fuelRessource', None, None, ), # 3
  )

  def __init__(self, basic_info=None, militarRessource=None, fuelRessource=None,):
    self.basic_info = basic_info
    self.militarRessource = militarRessource
    self.fuelRessource = fuelRessource

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.basic_info = BaseBasicData()
          self.basic_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.militarRessource = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.fuelRessource = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BaseFullData')
    if self.basic_info is not None:
      oprot.writeFieldBegin('basic_info', TType.STRUCT, 1)
      self.basic_info.write(oprot)
      oprot.writeFieldEnd()
    if self.militarRessource is not None:
      oprot.writeFieldBegin('militarRessource', TType.DOUBLE, 2)
      oprot.writeDouble(self.militarRessource)
      oprot.writeFieldEnd()
    if self.fuelRessource is not None:
      oprot.writeFieldBegin('fuelRessource', TType.DOUBLE, 3)
      oprot.writeDouble(self.fuelRessource)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BaseInitData:
  """
  Attributes:
   - base_id
   - posit
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'base_id', None, None, ), # 1
    (2, TType.STRUCT, 'posit', (CoordData, CoordData.thrift_spec), None, ), # 2
  )

  def __init__(self, base_id=None, posit=None,):
    self.base_id = base_id
    self.posit = posit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.base_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.posit = CoordData()
          self.posit.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BaseInitData')
    if self.base_id is not None:
      oprot.writeFieldBegin('base_id', TType.I32, 1)
      oprot.writeI32(self.base_id)
      oprot.writeFieldEnd()
    if self.posit is not None:
      oprot.writeFieldBegin('posit', TType.STRUCT, 2)
      self.posit.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProgressAxisInitData:
  """
  Attributes:
   - id
   - base1_id
   - base2_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'base1_id', None, None, ), # 2
    (3, TType.I32, 'base2_id', None, None, ), # 3
  )

  def __init__(self, id=None, base1_id=None, base2_id=None,):
    self.id = id
    self.base1_id = base1_id
    self.base2_id = base2_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.base1_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.base2_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProgressAxisInitData')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.base1_id is not None:
      oprot.writeFieldBegin('base1_id', TType.I32, 2)
      oprot.writeI32(self.base1_id)
      oprot.writeFieldEnd()
    if self.base2_id is not None:
      oprot.writeFieldBegin('base2_id', TType.I32, 3)
      oprot.writeI32(self.base2_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProgressAxisData:
  """
  Attributes:
   - id
   - progressBase1
   - progressBase2
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.DOUBLE, 'progressBase1', None, None, ), # 2
    (3, TType.DOUBLE, 'progressBase2', None, None, ), # 3
  )

  def __init__(self, id=None, progressBase1=None, progressBase2=None,):
    self.id = id
    self.progressBase1 = progressBase1
    self.progressBase2 = progressBase2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.progressBase1 = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.progressBase2 = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProgressAxisData')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.progressBase1 is not None:
      oprot.writeFieldBegin('progressBase1', TType.DOUBLE, 2)
      oprot.writeDouble(self.progressBase1)
      oprot.writeFieldEnd()
    if self.progressBase2 is not None:
      oprot.writeFieldBegin('progressBase2', TType.DOUBLE, 3)
      oprot.writeDouble(self.progressBase2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CountryInitData:
  """
  Attributes:
   - country1
   - country2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'country1', (CoordData, CoordData.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'country2', (CoordData, CoordData.thrift_spec), None, ), # 2
  )

  def __init__(self, country1=None, country2=None,):
    self.country1 = country1
    self.country2 = country2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.country1 = CoordData()
          self.country1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.country2 = CoordData()
          self.country2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CountryInitData')
    if self.country1 is not None:
      oprot.writeFieldBegin('country1', TType.STRUCT, 1)
      self.country1.write(oprot)
      oprot.writeFieldEnd()
    if self.country2 is not None:
      oprot.writeFieldBegin('country2', TType.STRUCT, 2)
      self.country2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CountryData:
  """
  Attributes:
   - PlanesIdInProductionChain
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'PlanesIdInProductionChain', (TType.I32,None), None, ), # 1
  )

  def __init__(self, PlanesIdInProductionChain=None,):
    self.PlanesIdInProductionChain = PlanesIdInProductionChain

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.PlanesIdInProductionChain = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.PlanesIdInProductionChain.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CountryData')
    if self.PlanesIdInProductionChain is not None:
      oprot.writeFieldBegin('PlanesIdInProductionChain', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.PlanesIdInProductionChain))
      for iter6 in self.PlanesIdInProductionChain:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ConnectionData:
  """
  Attributes:
   - con_id
   - player_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'con_id', None, None, ), # 1
    (2, TType.I32, 'player_id', None, None, ), # 2
  )

  def __init__(self, con_id=None, player_id=None,):
    self.con_id = con_id
    self.player_id = player_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.con_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.player_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ConnectionData')
    if self.con_id is not None:
      oprot.writeFieldBegin('con_id', TType.I32, 1)
      oprot.writeI32(self.con_id)
      oprot.writeFieldEnd()
    if self.player_id is not None:
      oprot.writeFieldBegin('player_id', TType.I32, 2)
      oprot.writeI32(self.player_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InitData:
  """
  Attributes:
   - bases
   - mapWidth
   - mapHeight
   - progressAxis
   - myCountry
   - othersCountry
   - initMoney
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'bases', (TType.STRUCT,(BaseInitData, BaseInitData.thrift_spec)), None, ), # 1
    (2, TType.DOUBLE, 'mapWidth', None, None, ), # 2
    (3, TType.DOUBLE, 'mapHeight', None, None, ), # 3
    (4, TType.LIST, 'progressAxis', (TType.STRUCT,(ProgressAxisInitData, ProgressAxisInitData.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'myCountry', (CountryInitData, CountryInitData.thrift_spec), None, ), # 5
    (6, TType.LIST, 'othersCountry', (TType.STRUCT,(CountryInitData, CountryInitData.thrift_spec)), None, ), # 6
    (7, TType.I32, 'initMoney', None, None, ), # 7
  )

  def __init__(self, bases=None, mapWidth=None, mapHeight=None, progressAxis=None, myCountry=None, othersCountry=None, initMoney=None,):
    self.bases = bases
    self.mapWidth = mapWidth
    self.mapHeight = mapHeight
    self.progressAxis = progressAxis
    self.myCountry = myCountry
    self.othersCountry = othersCountry
    self.initMoney = initMoney

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.bases = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = BaseInitData()
            _elem12.read(iprot)
            self.bases.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.mapWidth = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.mapHeight = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.progressAxis = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = ProgressAxisInitData()
            _elem18.read(iprot)
            self.progressAxis.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.myCountry = CountryInitData()
          self.myCountry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.othersCountry = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = CountryInitData()
            _elem24.read(iprot)
            self.othersCountry.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.initMoney = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InitData')
    if self.bases is not None:
      oprot.writeFieldBegin('bases', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.bases))
      for iter25 in self.bases:
        iter25.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mapWidth is not None:
      oprot.writeFieldBegin('mapWidth', TType.DOUBLE, 2)
      oprot.writeDouble(self.mapWidth)
      oprot.writeFieldEnd()
    if self.mapHeight is not None:
      oprot.writeFieldBegin('mapHeight', TType.DOUBLE, 3)
      oprot.writeDouble(self.mapHeight)
      oprot.writeFieldEnd()
    if self.progressAxis is not None:
      oprot.writeFieldBegin('progressAxis', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.progressAxis))
      for iter26 in self.progressAxis:
        iter26.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.myCountry is not None:
      oprot.writeFieldBegin('myCountry', TType.STRUCT, 5)
      self.myCountry.write(oprot)
      oprot.writeFieldEnd()
    if self.othersCountry is not None:
      oprot.writeFieldBegin('othersCountry', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.othersCountry))
      for iter27 in self.othersCountry:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.initMoney is not None:
      oprot.writeFieldBegin('initMoney', TType.I32, 7)
      oprot.writeI32(self.initMoney)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Data:
  """
  Attributes:
   - numFrame
   - owned_planes
   - not_owned_planes
   - owned_bases
   - not_owned_bases
   - progressAxis
   - myCountry
   - currentMoney
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'numFrame', None, None, ), # 1
    (2, TType.LIST, 'owned_planes', (TType.STRUCT,(PlaneFullData, PlaneFullData.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'not_owned_planes', (TType.STRUCT,(PlaneBasicData, PlaneBasicData.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'owned_bases', (TType.STRUCT,(BaseFullData, BaseFullData.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'not_owned_bases', (TType.STRUCT,(BaseBasicData, BaseBasicData.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'progressAxis', (TType.STRUCT,(ProgressAxisData, ProgressAxisData.thrift_spec)), None, ), # 6
    (7, TType.STRUCT, 'myCountry', (CountryData, CountryData.thrift_spec), None, ), # 7
    (8, TType.I32, 'currentMoney', None, None, ), # 8
  )

  def __init__(self, numFrame=None, owned_planes=None, not_owned_planes=None, owned_bases=None, not_owned_bases=None, progressAxis=None, myCountry=None, currentMoney=None,):
    self.numFrame = numFrame
    self.owned_planes = owned_planes
    self.not_owned_planes = not_owned_planes
    self.owned_bases = owned_bases
    self.not_owned_bases = not_owned_bases
    self.progressAxis = progressAxis
    self.myCountry = myCountry
    self.currentMoney = currentMoney

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.numFrame = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.owned_planes = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = PlaneFullData()
            _elem33.read(iprot)
            self.owned_planes.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.not_owned_planes = []
          (_etype37, _size34) = iprot.readListBegin()
          for _i38 in xrange(_size34):
            _elem39 = PlaneBasicData()
            _elem39.read(iprot)
            self.not_owned_planes.append(_elem39)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.owned_bases = []
          (_etype43, _size40) = iprot.readListBegin()
          for _i44 in xrange(_size40):
            _elem45 = BaseFullData()
            _elem45.read(iprot)
            self.owned_bases.append(_elem45)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.not_owned_bases = []
          (_etype49, _size46) = iprot.readListBegin()
          for _i50 in xrange(_size46):
            _elem51 = BaseBasicData()
            _elem51.read(iprot)
            self.not_owned_bases.append(_elem51)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.progressAxis = []
          (_etype55, _size52) = iprot.readListBegin()
          for _i56 in xrange(_size52):
            _elem57 = ProgressAxisData()
            _elem57.read(iprot)
            self.progressAxis.append(_elem57)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.myCountry = CountryData()
          self.myCountry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.currentMoney = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Data')
    if self.numFrame is not None:
      oprot.writeFieldBegin('numFrame', TType.I32, 1)
      oprot.writeI32(self.numFrame)
      oprot.writeFieldEnd()
    if self.owned_planes is not None:
      oprot.writeFieldBegin('owned_planes', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.owned_planes))
      for iter58 in self.owned_planes:
        iter58.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.not_owned_planes is not None:
      oprot.writeFieldBegin('not_owned_planes', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.not_owned_planes))
      for iter59 in self.not_owned_planes:
        iter59.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.owned_bases is not None:
      oprot.writeFieldBegin('owned_bases', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.owned_bases))
      for iter60 in self.owned_bases:
        iter60.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.not_owned_bases is not None:
      oprot.writeFieldBegin('not_owned_bases', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.not_owned_bases))
      for iter61 in self.not_owned_bases:
        iter61.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.progressAxis is not None:
      oprot.writeFieldBegin('progressAxis', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.progressAxis))
      for iter62 in self.progressAxis:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.myCountry is not None:
      oprot.writeFieldBegin('myCountry', TType.STRUCT, 7)
      self.myCountry.write(oprot)
      oprot.writeFieldEnd()
    if self.currentMoney is not None:
      oprot.writeFieldBegin('currentMoney', TType.I32, 8)
      oprot.writeI32(self.currentMoney)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommandData:
  """
  Attributes:
   - numFrame
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'numFrame', None, None, ), # 1
  )

  def __init__(self, numFrame=None,):
    self.numFrame = numFrame

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.numFrame = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommandData')
    if self.numFrame is not None:
      oprot.writeFieldBegin('numFrame', TType.I32, 1)
      oprot.writeI32(self.numFrame)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlaneCommandData:
  """
  Attributes:
   - c
   - idPlane
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'c', (CommandData, CommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idPlane', None, None, ), # 2
  )

  def __init__(self, c=None, idPlane=None,):
    self.c = c
    self.idPlane = idPlane

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.c = CommandData()
          self.c.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idPlane = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlaneCommandData')
    if self.c is not None:
      oprot.writeFieldBegin('c', TType.STRUCT, 1)
      self.c.write(oprot)
      oprot.writeFieldEnd()
    if self.idPlane is not None:
      oprot.writeFieldBegin('idPlane', TType.I32, 2)
      oprot.writeI32(self.idPlane)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveCommandData:
  """
  Attributes:
   - pc
   - posDest
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'posDest', (CoordData, CoordData.thrift_spec), None, ), # 2
  )

  def __init__(self, pc=None, posDest=None,):
    self.pc = pc
    self.posDest = posDest

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.posDest = CoordData()
          self.posDest.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.posDest is not None:
      oprot.writeFieldBegin('posDest', TType.STRUCT, 2)
      self.posDest.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WaitCommandData:
  """
  Attributes:
   - pc
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
  )

  def __init__(self, pc=None,):
    self.pc = pc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WaitCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LandCommandData:
  """
  Attributes:
   - pc
   - idBase
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idBase', None, None, ), # 2
  )

  def __init__(self, pc=None, idBase=None,):
    self.pc = pc
    self.idBase = idBase

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idBase = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LandCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.idBase is not None:
      oprot.writeFieldBegin('idBase', TType.I32, 2)
      oprot.writeI32(self.idBase)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AttackCommandData:
  """
  Attributes:
   - pc
   - idTarget
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idTarget', None, None, ), # 2
  )

  def __init__(self, pc=None, idTarget=None,):
    self.pc = pc
    self.idTarget = idTarget

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idTarget = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AttackCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.idTarget is not None:
      oprot.writeFieldBegin('idTarget', TType.I32, 2)
      oprot.writeI32(self.idTarget)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FollowCommandData:
  """
  Attributes:
   - pc
   - idTarget
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'idTarget', None, None, ), # 2
  )

  def __init__(self, pc=None, idTarget=None,):
    self.pc = pc
    self.idTarget = idTarget

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.idTarget = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FollowCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.idTarget is not None:
      oprot.writeFieldBegin('idTarget', TType.I32, 2)
      oprot.writeI32(self.idTarget)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DropMilitarsCommandData:
  """
  Attributes:
   - pc
   - base_id
   - quantity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.I32, 'base_id', None, None, ), # 2
    (3, TType.DOUBLE, 'quantity', None, None, ), # 3
  )

  def __init__(self, pc=None, base_id=None, quantity=None,):
    self.pc = pc
    self.base_id = base_id
    self.quantity = quantity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.base_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.quantity = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DropMilitarsCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.base_id is not None:
      oprot.writeFieldBegin('base_id', TType.I32, 2)
      oprot.writeI32(self.base_id)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.DOUBLE, 3)
      oprot.writeDouble(self.quantity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreFuelCommandData:
  """
  Attributes:
   - pc
   - quantity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.DOUBLE, 'quantity', None, None, ), # 2
  )

  def __init__(self, pc=None, quantity=None,):
    self.pc = pc
    self.quantity = quantity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.quantity = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreFuelCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.DOUBLE, 2)
      oprot.writeDouble(self.quantity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FillFuelTankCommandData:
  """
  Attributes:
   - pc
   - quantity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.DOUBLE, 'quantity', None, None, ), # 2
  )

  def __init__(self, pc=None, quantity=None,):
    self.pc = pc
    self.quantity = quantity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.quantity = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FillFuelTankCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.DOUBLE, 2)
      oprot.writeDouble(self.quantity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoadResourcesCommandData:
  """
  Attributes:
   - pc
   - militar_quantity
   - fuel_quantity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pc', (PlaneCommandData, PlaneCommandData.thrift_spec), None, ), # 1
    (2, TType.DOUBLE, 'militar_quantity', None, None, ), # 2
    (3, TType.DOUBLE, 'fuel_quantity', None, None, ), # 3
  )

  def __init__(self, pc=None, militar_quantity=None, fuel_quantity=None,):
    self.pc = pc
    self.militar_quantity = militar_quantity
    self.fuel_quantity = fuel_quantity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pc = PlaneCommandData()
          self.pc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.militar_quantity = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.fuel_quantity = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoadResourcesCommandData')
    if self.pc is not None:
      oprot.writeFieldBegin('pc', TType.STRUCT, 1)
      self.pc.write(oprot)
      oprot.writeFieldEnd()
    if self.militar_quantity is not None:
      oprot.writeFieldBegin('militar_quantity', TType.DOUBLE, 2)
      oprot.writeDouble(self.militar_quantity)
      oprot.writeFieldEnd()
    if self.fuel_quantity is not None:
      oprot.writeFieldBegin('fuel_quantity', TType.DOUBLE, 3)
      oprot.writeDouble(self.fuel_quantity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Response:
  """
  Attributes:
   - code
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'code', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, code=None, message=None,):
    self.code = code
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Response')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 1)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
