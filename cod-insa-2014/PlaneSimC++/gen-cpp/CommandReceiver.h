/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CommandReceiver_H
#define CommandReceiver_H

#include <thrift/TDispatchProcessor.h>
#include "network_types.h"

namespace genbridge {

class CommandReceiverIf {
 public:
  virtual ~CommandReceiverIf() {}
  virtual void sendMoveCommand(Response& _return, const MoveCommandData& cmd, const int idConnection) = 0;
  virtual void sendWaitCommand(Response& _return, const WaitCommandData& cmd, const int idConnection) = 0;
  virtual void sendLandCommand(Response& _return, const LandCommandData& cmd, const int idConnection) = 0;
  virtual void sendFollowCommand(Response& _return, const FollowCommandData& cmd, const int idConnection) = 0;
  virtual void sendAttackCommand(Response& _return, const AttackCommandData& cmd, const int idConnection) = 0;
  virtual void sendDropMilitarsCommand(Response& _return, const DropMilitarsCommandData& cmd, const int idConnection) = 0;
  virtual void sendStoreFuelCommand(Response& _return, const StoreFuelCommandData& cmd, const int idConnection) = 0;
  virtual void sendFillFuelTankCommand(Response& _return, const FillFuelTankCommandData& cmd, const int idConnection) = 0;
  virtual void sendLoadResourcesCommand(Response& _return, const LoadResourcesCommandData& cmd, const int idConnection) = 0;
  virtual void sendBuildPlaneCommand(Response& _return, const BuildPlaneCommandData& cmd, const int idConnection) = 0;
};

class CommandReceiverIfFactory {
 public:
  typedef CommandReceiverIf Handler;

  virtual ~CommandReceiverIfFactory() {}

  virtual CommandReceiverIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CommandReceiverIf* /* handler */) = 0;
};

class CommandReceiverIfSingletonFactory : virtual public CommandReceiverIfFactory {
 public:
  CommandReceiverIfSingletonFactory(const boost::shared_ptr<CommandReceiverIf>& iface) : iface_(iface) {}
  virtual ~CommandReceiverIfSingletonFactory() {}

  virtual CommandReceiverIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CommandReceiverIf* /* handler */) {}

 protected:
  boost::shared_ptr<CommandReceiverIf> iface_;
};

class CommandReceiverNull : virtual public CommandReceiverIf {
 public:
  virtual ~CommandReceiverNull() {}
  void sendMoveCommand(Response& /* _return */, const MoveCommandData& /* cmd */, const int /* idConnection */) {
    return;
  }
  void sendWaitCommand(Response& /* _return */, const WaitCommandData& /* cmd */, const int /* idConnection */) {
    return;
  }
  void sendLandCommand(Response& /* _return */, const LandCommandData& /* cmd */, const int /* idConnection */) {
    return;
  }
  void sendFollowCommand(Response& /* _return */, const FollowCommandData& /* cmd */, const int /* idConnection */) {
    return;
  }
  void sendAttackCommand(Response& /* _return */, const AttackCommandData& /* cmd */, const int /* idConnection */) {
    return;
  }
  void sendDropMilitarsCommand(Response& /* _return */, const DropMilitarsCommandData& /* cmd */, const int /* idConnection */) {
    return;
  }
  void sendStoreFuelCommand(Response& /* _return */, const StoreFuelCommandData& /* cmd */, const int /* idConnection */) {
    return;
  }
  void sendFillFuelTankCommand(Response& /* _return */, const FillFuelTankCommandData& /* cmd */, const int /* idConnection */) {
    return;
  }
  void sendLoadResourcesCommand(Response& /* _return */, const LoadResourcesCommandData& /* cmd */, const int /* idConnection */) {
    return;
  }
  void sendBuildPlaneCommand(Response& /* _return */, const BuildPlaneCommandData& /* cmd */, const int /* idConnection */) {
    return;
  }
};

typedef struct _CommandReceiver_sendMoveCommand_args__isset {
  _CommandReceiver_sendMoveCommand_args__isset() : cmd(false), idConnection(false) {}
  bool cmd;
  bool idConnection;
} _CommandReceiver_sendMoveCommand_args__isset;

class CommandReceiver_sendMoveCommand_args {
 public:

  CommandReceiver_sendMoveCommand_args() : idConnection(0) {
  }

  virtual ~CommandReceiver_sendMoveCommand_args() throw() {}

  MoveCommandData cmd;
  int idConnection;

  _CommandReceiver_sendMoveCommand_args__isset __isset;

  void __set_cmd(const MoveCommandData& val) {
    cmd = val;
  }

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const CommandReceiver_sendMoveCommand_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendMoveCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendMoveCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommandReceiver_sendMoveCommand_pargs {
 public:


  virtual ~CommandReceiver_sendMoveCommand_pargs() throw() {}

  const MoveCommandData* cmd;
  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendMoveCommand_result__isset {
  _CommandReceiver_sendMoveCommand_result__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendMoveCommand_result__isset;

class CommandReceiver_sendMoveCommand_result {
 public:

  CommandReceiver_sendMoveCommand_result() {
  }

  virtual ~CommandReceiver_sendMoveCommand_result() throw() {}

  Response success;

  _CommandReceiver_sendMoveCommand_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  bool operator == (const CommandReceiver_sendMoveCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendMoveCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendMoveCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendMoveCommand_presult__isset {
  _CommandReceiver_sendMoveCommand_presult__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendMoveCommand_presult__isset;

class CommandReceiver_sendMoveCommand_presult {
 public:


  virtual ~CommandReceiver_sendMoveCommand_presult() throw() {}

  Response* success;

  _CommandReceiver_sendMoveCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommandReceiver_sendWaitCommand_args__isset {
  _CommandReceiver_sendWaitCommand_args__isset() : cmd(false), idConnection(false) {}
  bool cmd;
  bool idConnection;
} _CommandReceiver_sendWaitCommand_args__isset;

class CommandReceiver_sendWaitCommand_args {
 public:

  CommandReceiver_sendWaitCommand_args() : idConnection(0) {
  }

  virtual ~CommandReceiver_sendWaitCommand_args() throw() {}

  WaitCommandData cmd;
  int idConnection;

  _CommandReceiver_sendWaitCommand_args__isset __isset;

  void __set_cmd(const WaitCommandData& val) {
    cmd = val;
  }

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const CommandReceiver_sendWaitCommand_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendWaitCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendWaitCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommandReceiver_sendWaitCommand_pargs {
 public:


  virtual ~CommandReceiver_sendWaitCommand_pargs() throw() {}

  const WaitCommandData* cmd;
  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendWaitCommand_result__isset {
  _CommandReceiver_sendWaitCommand_result__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendWaitCommand_result__isset;

class CommandReceiver_sendWaitCommand_result {
 public:

  CommandReceiver_sendWaitCommand_result() {
  }

  virtual ~CommandReceiver_sendWaitCommand_result() throw() {}

  Response success;

  _CommandReceiver_sendWaitCommand_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  bool operator == (const CommandReceiver_sendWaitCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendWaitCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendWaitCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendWaitCommand_presult__isset {
  _CommandReceiver_sendWaitCommand_presult__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendWaitCommand_presult__isset;

class CommandReceiver_sendWaitCommand_presult {
 public:


  virtual ~CommandReceiver_sendWaitCommand_presult() throw() {}

  Response* success;

  _CommandReceiver_sendWaitCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommandReceiver_sendLandCommand_args__isset {
  _CommandReceiver_sendLandCommand_args__isset() : cmd(false), idConnection(false) {}
  bool cmd;
  bool idConnection;
} _CommandReceiver_sendLandCommand_args__isset;

class CommandReceiver_sendLandCommand_args {
 public:

  CommandReceiver_sendLandCommand_args() : idConnection(0) {
  }

  virtual ~CommandReceiver_sendLandCommand_args() throw() {}

  LandCommandData cmd;
  int idConnection;

  _CommandReceiver_sendLandCommand_args__isset __isset;

  void __set_cmd(const LandCommandData& val) {
    cmd = val;
  }

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const CommandReceiver_sendLandCommand_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendLandCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendLandCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommandReceiver_sendLandCommand_pargs {
 public:


  virtual ~CommandReceiver_sendLandCommand_pargs() throw() {}

  const LandCommandData* cmd;
  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendLandCommand_result__isset {
  _CommandReceiver_sendLandCommand_result__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendLandCommand_result__isset;

class CommandReceiver_sendLandCommand_result {
 public:

  CommandReceiver_sendLandCommand_result() {
  }

  virtual ~CommandReceiver_sendLandCommand_result() throw() {}

  Response success;

  _CommandReceiver_sendLandCommand_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  bool operator == (const CommandReceiver_sendLandCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendLandCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendLandCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendLandCommand_presult__isset {
  _CommandReceiver_sendLandCommand_presult__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendLandCommand_presult__isset;

class CommandReceiver_sendLandCommand_presult {
 public:


  virtual ~CommandReceiver_sendLandCommand_presult() throw() {}

  Response* success;

  _CommandReceiver_sendLandCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommandReceiver_sendFollowCommand_args__isset {
  _CommandReceiver_sendFollowCommand_args__isset() : cmd(false), idConnection(false) {}
  bool cmd;
  bool idConnection;
} _CommandReceiver_sendFollowCommand_args__isset;

class CommandReceiver_sendFollowCommand_args {
 public:

  CommandReceiver_sendFollowCommand_args() : idConnection(0) {
  }

  virtual ~CommandReceiver_sendFollowCommand_args() throw() {}

  FollowCommandData cmd;
  int idConnection;

  _CommandReceiver_sendFollowCommand_args__isset __isset;

  void __set_cmd(const FollowCommandData& val) {
    cmd = val;
  }

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const CommandReceiver_sendFollowCommand_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendFollowCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendFollowCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommandReceiver_sendFollowCommand_pargs {
 public:


  virtual ~CommandReceiver_sendFollowCommand_pargs() throw() {}

  const FollowCommandData* cmd;
  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendFollowCommand_result__isset {
  _CommandReceiver_sendFollowCommand_result__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendFollowCommand_result__isset;

class CommandReceiver_sendFollowCommand_result {
 public:

  CommandReceiver_sendFollowCommand_result() {
  }

  virtual ~CommandReceiver_sendFollowCommand_result() throw() {}

  Response success;

  _CommandReceiver_sendFollowCommand_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  bool operator == (const CommandReceiver_sendFollowCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendFollowCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendFollowCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendFollowCommand_presult__isset {
  _CommandReceiver_sendFollowCommand_presult__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendFollowCommand_presult__isset;

class CommandReceiver_sendFollowCommand_presult {
 public:


  virtual ~CommandReceiver_sendFollowCommand_presult() throw() {}

  Response* success;

  _CommandReceiver_sendFollowCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommandReceiver_sendAttackCommand_args__isset {
  _CommandReceiver_sendAttackCommand_args__isset() : cmd(false), idConnection(false) {}
  bool cmd;
  bool idConnection;
} _CommandReceiver_sendAttackCommand_args__isset;

class CommandReceiver_sendAttackCommand_args {
 public:

  CommandReceiver_sendAttackCommand_args() : idConnection(0) {
  }

  virtual ~CommandReceiver_sendAttackCommand_args() throw() {}

  AttackCommandData cmd;
  int idConnection;

  _CommandReceiver_sendAttackCommand_args__isset __isset;

  void __set_cmd(const AttackCommandData& val) {
    cmd = val;
  }

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const CommandReceiver_sendAttackCommand_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendAttackCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendAttackCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommandReceiver_sendAttackCommand_pargs {
 public:


  virtual ~CommandReceiver_sendAttackCommand_pargs() throw() {}

  const AttackCommandData* cmd;
  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendAttackCommand_result__isset {
  _CommandReceiver_sendAttackCommand_result__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendAttackCommand_result__isset;

class CommandReceiver_sendAttackCommand_result {
 public:

  CommandReceiver_sendAttackCommand_result() {
  }

  virtual ~CommandReceiver_sendAttackCommand_result() throw() {}

  Response success;

  _CommandReceiver_sendAttackCommand_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  bool operator == (const CommandReceiver_sendAttackCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendAttackCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendAttackCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendAttackCommand_presult__isset {
  _CommandReceiver_sendAttackCommand_presult__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendAttackCommand_presult__isset;

class CommandReceiver_sendAttackCommand_presult {
 public:


  virtual ~CommandReceiver_sendAttackCommand_presult() throw() {}

  Response* success;

  _CommandReceiver_sendAttackCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommandReceiver_sendDropMilitarsCommand_args__isset {
  _CommandReceiver_sendDropMilitarsCommand_args__isset() : cmd(false), idConnection(false) {}
  bool cmd;
  bool idConnection;
} _CommandReceiver_sendDropMilitarsCommand_args__isset;

class CommandReceiver_sendDropMilitarsCommand_args {
 public:

  CommandReceiver_sendDropMilitarsCommand_args() : idConnection(0) {
  }

  virtual ~CommandReceiver_sendDropMilitarsCommand_args() throw() {}

  DropMilitarsCommandData cmd;
  int idConnection;

  _CommandReceiver_sendDropMilitarsCommand_args__isset __isset;

  void __set_cmd(const DropMilitarsCommandData& val) {
    cmd = val;
  }

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const CommandReceiver_sendDropMilitarsCommand_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendDropMilitarsCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendDropMilitarsCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommandReceiver_sendDropMilitarsCommand_pargs {
 public:


  virtual ~CommandReceiver_sendDropMilitarsCommand_pargs() throw() {}

  const DropMilitarsCommandData* cmd;
  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendDropMilitarsCommand_result__isset {
  _CommandReceiver_sendDropMilitarsCommand_result__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendDropMilitarsCommand_result__isset;

class CommandReceiver_sendDropMilitarsCommand_result {
 public:

  CommandReceiver_sendDropMilitarsCommand_result() {
  }

  virtual ~CommandReceiver_sendDropMilitarsCommand_result() throw() {}

  Response success;

  _CommandReceiver_sendDropMilitarsCommand_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  bool operator == (const CommandReceiver_sendDropMilitarsCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendDropMilitarsCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendDropMilitarsCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendDropMilitarsCommand_presult__isset {
  _CommandReceiver_sendDropMilitarsCommand_presult__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendDropMilitarsCommand_presult__isset;

class CommandReceiver_sendDropMilitarsCommand_presult {
 public:


  virtual ~CommandReceiver_sendDropMilitarsCommand_presult() throw() {}

  Response* success;

  _CommandReceiver_sendDropMilitarsCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommandReceiver_sendStoreFuelCommand_args__isset {
  _CommandReceiver_sendStoreFuelCommand_args__isset() : cmd(false), idConnection(false) {}
  bool cmd;
  bool idConnection;
} _CommandReceiver_sendStoreFuelCommand_args__isset;

class CommandReceiver_sendStoreFuelCommand_args {
 public:

  CommandReceiver_sendStoreFuelCommand_args() : idConnection(0) {
  }

  virtual ~CommandReceiver_sendStoreFuelCommand_args() throw() {}

  StoreFuelCommandData cmd;
  int idConnection;

  _CommandReceiver_sendStoreFuelCommand_args__isset __isset;

  void __set_cmd(const StoreFuelCommandData& val) {
    cmd = val;
  }

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const CommandReceiver_sendStoreFuelCommand_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendStoreFuelCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendStoreFuelCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommandReceiver_sendStoreFuelCommand_pargs {
 public:


  virtual ~CommandReceiver_sendStoreFuelCommand_pargs() throw() {}

  const StoreFuelCommandData* cmd;
  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendStoreFuelCommand_result__isset {
  _CommandReceiver_sendStoreFuelCommand_result__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendStoreFuelCommand_result__isset;

class CommandReceiver_sendStoreFuelCommand_result {
 public:

  CommandReceiver_sendStoreFuelCommand_result() {
  }

  virtual ~CommandReceiver_sendStoreFuelCommand_result() throw() {}

  Response success;

  _CommandReceiver_sendStoreFuelCommand_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  bool operator == (const CommandReceiver_sendStoreFuelCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendStoreFuelCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendStoreFuelCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendStoreFuelCommand_presult__isset {
  _CommandReceiver_sendStoreFuelCommand_presult__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendStoreFuelCommand_presult__isset;

class CommandReceiver_sendStoreFuelCommand_presult {
 public:


  virtual ~CommandReceiver_sendStoreFuelCommand_presult() throw() {}

  Response* success;

  _CommandReceiver_sendStoreFuelCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommandReceiver_sendFillFuelTankCommand_args__isset {
  _CommandReceiver_sendFillFuelTankCommand_args__isset() : cmd(false), idConnection(false) {}
  bool cmd;
  bool idConnection;
} _CommandReceiver_sendFillFuelTankCommand_args__isset;

class CommandReceiver_sendFillFuelTankCommand_args {
 public:

  CommandReceiver_sendFillFuelTankCommand_args() : idConnection(0) {
  }

  virtual ~CommandReceiver_sendFillFuelTankCommand_args() throw() {}

  FillFuelTankCommandData cmd;
  int idConnection;

  _CommandReceiver_sendFillFuelTankCommand_args__isset __isset;

  void __set_cmd(const FillFuelTankCommandData& val) {
    cmd = val;
  }

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const CommandReceiver_sendFillFuelTankCommand_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendFillFuelTankCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendFillFuelTankCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommandReceiver_sendFillFuelTankCommand_pargs {
 public:


  virtual ~CommandReceiver_sendFillFuelTankCommand_pargs() throw() {}

  const FillFuelTankCommandData* cmd;
  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendFillFuelTankCommand_result__isset {
  _CommandReceiver_sendFillFuelTankCommand_result__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendFillFuelTankCommand_result__isset;

class CommandReceiver_sendFillFuelTankCommand_result {
 public:

  CommandReceiver_sendFillFuelTankCommand_result() {
  }

  virtual ~CommandReceiver_sendFillFuelTankCommand_result() throw() {}

  Response success;

  _CommandReceiver_sendFillFuelTankCommand_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  bool operator == (const CommandReceiver_sendFillFuelTankCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendFillFuelTankCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendFillFuelTankCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendFillFuelTankCommand_presult__isset {
  _CommandReceiver_sendFillFuelTankCommand_presult__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendFillFuelTankCommand_presult__isset;

class CommandReceiver_sendFillFuelTankCommand_presult {
 public:


  virtual ~CommandReceiver_sendFillFuelTankCommand_presult() throw() {}

  Response* success;

  _CommandReceiver_sendFillFuelTankCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommandReceiver_sendLoadResourcesCommand_args__isset {
  _CommandReceiver_sendLoadResourcesCommand_args__isset() : cmd(false), idConnection(false) {}
  bool cmd;
  bool idConnection;
} _CommandReceiver_sendLoadResourcesCommand_args__isset;

class CommandReceiver_sendLoadResourcesCommand_args {
 public:

  CommandReceiver_sendLoadResourcesCommand_args() : idConnection(0) {
  }

  virtual ~CommandReceiver_sendLoadResourcesCommand_args() throw() {}

  LoadResourcesCommandData cmd;
  int idConnection;

  _CommandReceiver_sendLoadResourcesCommand_args__isset __isset;

  void __set_cmd(const LoadResourcesCommandData& val) {
    cmd = val;
  }

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const CommandReceiver_sendLoadResourcesCommand_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendLoadResourcesCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendLoadResourcesCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommandReceiver_sendLoadResourcesCommand_pargs {
 public:


  virtual ~CommandReceiver_sendLoadResourcesCommand_pargs() throw() {}

  const LoadResourcesCommandData* cmd;
  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendLoadResourcesCommand_result__isset {
  _CommandReceiver_sendLoadResourcesCommand_result__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendLoadResourcesCommand_result__isset;

class CommandReceiver_sendLoadResourcesCommand_result {
 public:

  CommandReceiver_sendLoadResourcesCommand_result() {
  }

  virtual ~CommandReceiver_sendLoadResourcesCommand_result() throw() {}

  Response success;

  _CommandReceiver_sendLoadResourcesCommand_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  bool operator == (const CommandReceiver_sendLoadResourcesCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendLoadResourcesCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendLoadResourcesCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendLoadResourcesCommand_presult__isset {
  _CommandReceiver_sendLoadResourcesCommand_presult__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendLoadResourcesCommand_presult__isset;

class CommandReceiver_sendLoadResourcesCommand_presult {
 public:


  virtual ~CommandReceiver_sendLoadResourcesCommand_presult() throw() {}

  Response* success;

  _CommandReceiver_sendLoadResourcesCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommandReceiver_sendBuildPlaneCommand_args__isset {
  _CommandReceiver_sendBuildPlaneCommand_args__isset() : cmd(false), idConnection(false) {}
  bool cmd;
  bool idConnection;
} _CommandReceiver_sendBuildPlaneCommand_args__isset;

class CommandReceiver_sendBuildPlaneCommand_args {
 public:

  CommandReceiver_sendBuildPlaneCommand_args() : idConnection(0) {
  }

  virtual ~CommandReceiver_sendBuildPlaneCommand_args() throw() {}

  BuildPlaneCommandData cmd;
  int idConnection;

  _CommandReceiver_sendBuildPlaneCommand_args__isset __isset;

  void __set_cmd(const BuildPlaneCommandData& val) {
    cmd = val;
  }

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const CommandReceiver_sendBuildPlaneCommand_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendBuildPlaneCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendBuildPlaneCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommandReceiver_sendBuildPlaneCommand_pargs {
 public:


  virtual ~CommandReceiver_sendBuildPlaneCommand_pargs() throw() {}

  const BuildPlaneCommandData* cmd;
  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendBuildPlaneCommand_result__isset {
  _CommandReceiver_sendBuildPlaneCommand_result__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendBuildPlaneCommand_result__isset;

class CommandReceiver_sendBuildPlaneCommand_result {
 public:

  CommandReceiver_sendBuildPlaneCommand_result() {
  }

  virtual ~CommandReceiver_sendBuildPlaneCommand_result() throw() {}

  Response success;

  _CommandReceiver_sendBuildPlaneCommand_result__isset __isset;

  void __set_success(const Response& val) {
    success = val;
  }

  bool operator == (const CommandReceiver_sendBuildPlaneCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommandReceiver_sendBuildPlaneCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandReceiver_sendBuildPlaneCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommandReceiver_sendBuildPlaneCommand_presult__isset {
  _CommandReceiver_sendBuildPlaneCommand_presult__isset() : success(false) {}
  bool success;
} _CommandReceiver_sendBuildPlaneCommand_presult__isset;

class CommandReceiver_sendBuildPlaneCommand_presult {
 public:


  virtual ~CommandReceiver_sendBuildPlaneCommand_presult() throw() {}

  Response* success;

  _CommandReceiver_sendBuildPlaneCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CommandReceiverClient : virtual public CommandReceiverIf {
 public:
  CommandReceiverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CommandReceiverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sendMoveCommand(Response& _return, const MoveCommandData& cmd, const int idConnection);
  void send_sendMoveCommand(const MoveCommandData& cmd, const int idConnection);
  void recv_sendMoveCommand(Response& _return);
  void sendWaitCommand(Response& _return, const WaitCommandData& cmd, const int idConnection);
  void send_sendWaitCommand(const WaitCommandData& cmd, const int idConnection);
  void recv_sendWaitCommand(Response& _return);
  void sendLandCommand(Response& _return, const LandCommandData& cmd, const int idConnection);
  void send_sendLandCommand(const LandCommandData& cmd, const int idConnection);
  void recv_sendLandCommand(Response& _return);
  void sendFollowCommand(Response& _return, const FollowCommandData& cmd, const int idConnection);
  void send_sendFollowCommand(const FollowCommandData& cmd, const int idConnection);
  void recv_sendFollowCommand(Response& _return);
  void sendAttackCommand(Response& _return, const AttackCommandData& cmd, const int idConnection);
  void send_sendAttackCommand(const AttackCommandData& cmd, const int idConnection);
  void recv_sendAttackCommand(Response& _return);
  void sendDropMilitarsCommand(Response& _return, const DropMilitarsCommandData& cmd, const int idConnection);
  void send_sendDropMilitarsCommand(const DropMilitarsCommandData& cmd, const int idConnection);
  void recv_sendDropMilitarsCommand(Response& _return);
  void sendStoreFuelCommand(Response& _return, const StoreFuelCommandData& cmd, const int idConnection);
  void send_sendStoreFuelCommand(const StoreFuelCommandData& cmd, const int idConnection);
  void recv_sendStoreFuelCommand(Response& _return);
  void sendFillFuelTankCommand(Response& _return, const FillFuelTankCommandData& cmd, const int idConnection);
  void send_sendFillFuelTankCommand(const FillFuelTankCommandData& cmd, const int idConnection);
  void recv_sendFillFuelTankCommand(Response& _return);
  void sendLoadResourcesCommand(Response& _return, const LoadResourcesCommandData& cmd, const int idConnection);
  void send_sendLoadResourcesCommand(const LoadResourcesCommandData& cmd, const int idConnection);
  void recv_sendLoadResourcesCommand(Response& _return);
  void sendBuildPlaneCommand(Response& _return, const BuildPlaneCommandData& cmd, const int idConnection);
  void send_sendBuildPlaneCommand(const BuildPlaneCommandData& cmd, const int idConnection);
  void recv_sendBuildPlaneCommand(Response& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CommandReceiverProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CommandReceiverIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CommandReceiverProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sendMoveCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendWaitCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendLandCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendFollowCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendAttackCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendDropMilitarsCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendStoreFuelCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendFillFuelTankCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendLoadResourcesCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendBuildPlaneCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CommandReceiverProcessor(boost::shared_ptr<CommandReceiverIf> iface) :
    iface_(iface) {
    processMap_["sendMoveCommand"] = &CommandReceiverProcessor::process_sendMoveCommand;
    processMap_["sendWaitCommand"] = &CommandReceiverProcessor::process_sendWaitCommand;
    processMap_["sendLandCommand"] = &CommandReceiverProcessor::process_sendLandCommand;
    processMap_["sendFollowCommand"] = &CommandReceiverProcessor::process_sendFollowCommand;
    processMap_["sendAttackCommand"] = &CommandReceiverProcessor::process_sendAttackCommand;
    processMap_["sendDropMilitarsCommand"] = &CommandReceiverProcessor::process_sendDropMilitarsCommand;
    processMap_["sendStoreFuelCommand"] = &CommandReceiverProcessor::process_sendStoreFuelCommand;
    processMap_["sendFillFuelTankCommand"] = &CommandReceiverProcessor::process_sendFillFuelTankCommand;
    processMap_["sendLoadResourcesCommand"] = &CommandReceiverProcessor::process_sendLoadResourcesCommand;
    processMap_["sendBuildPlaneCommand"] = &CommandReceiverProcessor::process_sendBuildPlaneCommand;
  }

  virtual ~CommandReceiverProcessor() {}
};

class CommandReceiverProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CommandReceiverProcessorFactory(const ::boost::shared_ptr< CommandReceiverIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CommandReceiverIfFactory > handlerFactory_;
};

class CommandReceiverMultiface : virtual public CommandReceiverIf {
 public:
  CommandReceiverMultiface(std::vector<boost::shared_ptr<CommandReceiverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CommandReceiverMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CommandReceiverIf> > ifaces_;
  CommandReceiverMultiface() {}
  void add(boost::shared_ptr<CommandReceiverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sendMoveCommand(Response& _return, const MoveCommandData& cmd, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMoveCommand(_return, cmd, idConnection);
    }
    ifaces_[i]->sendMoveCommand(_return, cmd, idConnection);
    return;
  }

  void sendWaitCommand(Response& _return, const WaitCommandData& cmd, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendWaitCommand(_return, cmd, idConnection);
    }
    ifaces_[i]->sendWaitCommand(_return, cmd, idConnection);
    return;
  }

  void sendLandCommand(Response& _return, const LandCommandData& cmd, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendLandCommand(_return, cmd, idConnection);
    }
    ifaces_[i]->sendLandCommand(_return, cmd, idConnection);
    return;
  }

  void sendFollowCommand(Response& _return, const FollowCommandData& cmd, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendFollowCommand(_return, cmd, idConnection);
    }
    ifaces_[i]->sendFollowCommand(_return, cmd, idConnection);
    return;
  }

  void sendAttackCommand(Response& _return, const AttackCommandData& cmd, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendAttackCommand(_return, cmd, idConnection);
    }
    ifaces_[i]->sendAttackCommand(_return, cmd, idConnection);
    return;
  }

  void sendDropMilitarsCommand(Response& _return, const DropMilitarsCommandData& cmd, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendDropMilitarsCommand(_return, cmd, idConnection);
    }
    ifaces_[i]->sendDropMilitarsCommand(_return, cmd, idConnection);
    return;
  }

  void sendStoreFuelCommand(Response& _return, const StoreFuelCommandData& cmd, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendStoreFuelCommand(_return, cmd, idConnection);
    }
    ifaces_[i]->sendStoreFuelCommand(_return, cmd, idConnection);
    return;
  }

  void sendFillFuelTankCommand(Response& _return, const FillFuelTankCommandData& cmd, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendFillFuelTankCommand(_return, cmd, idConnection);
    }
    ifaces_[i]->sendFillFuelTankCommand(_return, cmd, idConnection);
    return;
  }

  void sendLoadResourcesCommand(Response& _return, const LoadResourcesCommandData& cmd, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendLoadResourcesCommand(_return, cmd, idConnection);
    }
    ifaces_[i]->sendLoadResourcesCommand(_return, cmd, idConnection);
    return;
  }

  void sendBuildPlaneCommand(Response& _return, const BuildPlaneCommandData& cmd, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendBuildPlaneCommand(_return, cmd, idConnection);
    }
    ifaces_[i]->sendBuildPlaneCommand(_return, cmd, idConnection);
    return;
  }

};

} // namespace

#endif
