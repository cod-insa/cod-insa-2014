// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CommandReceiver.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::genbridge;

class CommandReceiverHandler : virtual public CommandReceiverIf {
 public:
  CommandReceiverHandler() {
    // Your initialization goes here
  }

  void sendMoveCommand(Response& _return, const MoveCommandData& cmd, const int idConnection) {
    // Your implementation goes here
    printf("sendMoveCommand\n");
  }

  void sendWaitCommand(Response& _return, const WaitCommandData& cmd, const int idConnection) {
    // Your implementation goes here
    printf("sendWaitCommand\n");
  }

  void sendLandCommand(Response& _return, const LandCommandData& cmd, const int idConnection) {
    // Your implementation goes here
    printf("sendLandCommand\n");
  }

  void sendFollowCommand(Response& _return, const FollowCommandData& cmd, const int idConnection) {
    // Your implementation goes here
    printf("sendFollowCommand\n");
  }

  void sendAttackCommand(Response& _return, const AttackCommandData& cmd, const int idConnection) {
    // Your implementation goes here
    printf("sendAttackCommand\n");
  }

  void sendDropMilitarsCommand(Response& _return, const DropMilitarsCommandData& cmd, const int idConnection) {
    // Your implementation goes here
    printf("sendDropMilitarsCommand\n");
  }

  void sendStoreFuelCommand(Response& _return, const StoreFuelCommandData& cmd, const int idConnection) {
    // Your implementation goes here
    printf("sendStoreFuelCommand\n");
  }

  void sendFillFuelTankCommand(Response& _return, const FillFuelTankCommandData& cmd, const int idConnection) {
    // Your implementation goes here
    printf("sendFillFuelTankCommand\n");
  }

  void sendLoadResourcesCommand(Response& _return, const LoadResourcesCommandData& cmd, const int idConnection) {
    // Your implementation goes here
    printf("sendLoadResourcesCommand\n");
  }

  void sendBuildPlaneCommand(Response& _return, const BuildPlaneCommandData& cmd, const int idConnection) {
    // Your implementation goes here
    printf("sendBuildPlaneCommand\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<CommandReceiverHandler> handler(new CommandReceiverHandler());
  shared_ptr<TProcessor> processor(new CommandReceiverProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

