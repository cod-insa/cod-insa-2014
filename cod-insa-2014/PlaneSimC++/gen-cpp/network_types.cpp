/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "network_types.h"

#include <algorithm>

namespace genbridge {

int _kPlaneStateDataValues[] = {
  PlaneStateData::IDLE,
  PlaneStateData::GOING_TO,
  PlaneStateData::FOLLOWING,
  PlaneStateData::ATTACKING,
  PlaneStateData::LANDING,
  PlaneStateData::AT_AIRPORT,
  PlaneStateData::DEAD
};
const char* _kPlaneStateDataNames[] = {
  "IDLE",
  "GOING_TO",
  "FOLLOWING",
  "ATTACKING",
  "LANDING",
  "AT_AIRPORT",
  "DEAD"
};
const std::map<int, const char*> _PlaneStateData_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kPlaneStateDataValues, _kPlaneStateDataNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* CoordData::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t CoordData::binary_fingerprint[16] = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

uint32_t CoordData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoordData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CoordData");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoordData &a, CoordData &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.__isset, b.__isset);
}

const char* PlaneBasicData::ascii_fingerprint = "88554EAF7F3E53DC9585068E16F80AEB";
const uint8_t PlaneBasicData::binary_fingerprint[16] = {0x88,0x55,0x4E,0xAF,0x7F,0x3E,0x53,0xDC,0x95,0x85,0x06,0x8E,0x16,0xF8,0x0A,0xEB};

uint32_t PlaneBasicData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->plane_id);
          this->__isset.plane_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->posit.read(iprot);
          this->__isset.posit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ai_id);
          this->__isset.ai_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->health);
          this->__isset.health = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->canAttack);
          this->__isset.canAttack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->planeTypeId);
          this->__isset.planeTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlaneBasicData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlaneBasicData");

  xfer += oprot->writeFieldBegin("plane_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->plane_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("posit", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->posit.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ai_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->ai_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("health", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->health);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("canAttack", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->canAttack);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("planeTypeId", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->planeTypeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlaneBasicData &a, PlaneBasicData &b) {
  using ::std::swap;
  swap(a.plane_id, b.plane_id);
  swap(a.posit, b.posit);
  swap(a.ai_id, b.ai_id);
  swap(a.health, b.health);
  swap(a.canAttack, b.canAttack);
  swap(a.planeTypeId, b.planeTypeId);
  swap(a.__isset, b.__isset);
}

const char* PlaneFullData::ascii_fingerprint = "9C989AE7A851719E7A820EEA5E0FC4E7";
const uint8_t PlaneFullData::binary_fingerprint[16] = {0x9C,0x98,0x9A,0xE7,0xA8,0x51,0x71,0x9E,0x7A,0x82,0x0E,0xEA,0x5E,0x0F,0xC4,0xE7};

uint32_t PlaneFullData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->basic_info.read(iprot);
          this->__isset.basic_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->base_id);
          this->__isset.base_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->remainingGaz);
          this->__isset.remainingGaz = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->state = (PlaneStateData::type)ecast0;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->militarResourceCarried);
          this->__isset.militarResourceCarried = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fuelResourceCarried);
          this->__isset.fuelResourceCarried = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlaneFullData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlaneFullData");

  xfer += oprot->writeFieldBegin("basic_info", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->basic_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("base_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->base_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("remainingGaz", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->remainingGaz);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("militarResourceCarried", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->militarResourceCarried);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fuelResourceCarried", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->fuelResourceCarried);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlaneFullData &a, PlaneFullData &b) {
  using ::std::swap;
  swap(a.basic_info, b.basic_info);
  swap(a.base_id, b.base_id);
  swap(a.remainingGaz, b.remainingGaz);
  swap(a.state, b.state);
  swap(a.militarResourceCarried, b.militarResourceCarried);
  swap(a.fuelResourceCarried, b.fuelResourceCarried);
  swap(a.__isset, b.__isset);
}

const char* BaseBasicData::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t BaseBasicData::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t BaseBasicData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->base_id);
          this->__isset.base_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ai_id);
          this->__isset.ai_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BaseBasicData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BaseBasicData");

  xfer += oprot->writeFieldBegin("base_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->base_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ai_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ai_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BaseBasicData &a, BaseBasicData &b) {
  using ::std::swap;
  swap(a.base_id, b.base_id);
  swap(a.ai_id, b.ai_id);
  swap(a.__isset, b.__isset);
}

const char* BaseFullData::ascii_fingerprint = "DD08CF4C244DC7C60DE5BBFE559F6357";
const uint8_t BaseFullData::binary_fingerprint[16] = {0xDD,0x08,0xCF,0x4C,0x24,0x4D,0xC7,0xC6,0x0D,0xE5,0xBB,0xFE,0x55,0x9F,0x63,0x57};

uint32_t BaseFullData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->basic_info.read(iprot);
          this->__isset.basic_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->militarRessource);
          this->__isset.militarRessource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fuelRessource);
          this->__isset.fuelRessource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BaseFullData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BaseFullData");

  xfer += oprot->writeFieldBegin("basic_info", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->basic_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("militarRessource", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->militarRessource);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fuelRessource", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->fuelRessource);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BaseFullData &a, BaseFullData &b) {
  using ::std::swap;
  swap(a.basic_info, b.basic_info);
  swap(a.militarRessource, b.militarRessource);
  swap(a.fuelRessource, b.fuelRessource);
  swap(a.__isset, b.__isset);
}

const char* BaseInitData::ascii_fingerprint = "E25EF828A39BA6FAA7D1E497A45B056E";
const uint8_t BaseInitData::binary_fingerprint[16] = {0xE2,0x5E,0xF8,0x28,0xA3,0x9B,0xA6,0xFA,0xA7,0xD1,0xE4,0x97,0xA4,0x5B,0x05,0x6E};

uint32_t BaseInitData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->base_id);
          this->__isset.base_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->posit.read(iprot);
          this->__isset.posit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BaseInitData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BaseInitData");

  xfer += oprot->writeFieldBegin("base_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->base_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("posit", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->posit.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BaseInitData &a, BaseInitData &b) {
  using ::std::swap;
  swap(a.base_id, b.base_id);
  swap(a.posit, b.posit);
  swap(a.__isset, b.__isset);
}

const char* ProgressAxisInitData::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t ProgressAxisInitData::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t ProgressAxisInitData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->base1_id);
          this->__isset.base1_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->base2_id);
          this->__isset.base2_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProgressAxisInitData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProgressAxisInitData");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("base1_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->base1_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("base2_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->base2_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProgressAxisInitData &a, ProgressAxisInitData &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.base1_id, b.base1_id);
  swap(a.base2_id, b.base2_id);
  swap(a.__isset, b.__isset);
}

const char* ProgressAxisData::ascii_fingerprint = "06343684351EE9E5FC9AF57369AE1D80";
const uint8_t ProgressAxisData::binary_fingerprint[16] = {0x06,0x34,0x36,0x84,0x35,0x1E,0xE9,0xE5,0xFC,0x9A,0xF5,0x73,0x69,0xAE,0x1D,0x80};

uint32_t ProgressAxisData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->progressBase1);
          this->__isset.progressBase1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->progressBase2);
          this->__isset.progressBase2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProgressAxisData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProgressAxisData");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("progressBase1", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->progressBase1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("progressBase2", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->progressBase2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProgressAxisData &a, ProgressAxisData &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.progressBase1, b.progressBase1);
  swap(a.progressBase2, b.progressBase2);
  swap(a.__isset, b.__isset);
}

const char* RequestData::ascii_fingerprint = "31A8CF7803D4BBC35C8F22A1C921D0F9";
const uint8_t RequestData::binary_fingerprint[16] = {0x31,0xA8,0xCF,0x78,0x03,0xD4,0xBB,0xC3,0x5C,0x8F,0x22,0xA1,0xC9,0x21,0xD0,0xF9};

uint32_t RequestData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->timeBeforePlaneBuilt);
          this->__isset.timeBeforePlaneBuilt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->planeTypeId);
          this->__isset.planeTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestData");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeBeforePlaneBuilt", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->timeBeforePlaneBuilt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("planeTypeId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->planeTypeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestData &a, RequestData &b) {
  using ::std::swap;
  swap(a.requestId, b.requestId);
  swap(a.timeBeforePlaneBuilt, b.timeBeforePlaneBuilt);
  swap(a.planeTypeId, b.planeTypeId);
  swap(a.__isset, b.__isset);
}

const char* CountryInitData::ascii_fingerprint = "E25EF828A39BA6FAA7D1E497A45B056E";
const uint8_t CountryInitData::binary_fingerprint[16] = {0xE2,0x5E,0xF8,0x28,0xA3,0x9B,0xA6,0xFA,0xA7,0xD1,0xE4,0x97,0xA4,0x5B,0x05,0x6E};

uint32_t CountryInitData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->country_id);
          this->__isset.country_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->country.read(iprot);
          this->__isset.country = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CountryInitData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CountryInitData");

  xfer += oprot->writeFieldBegin("country_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->country_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("country", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->country.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CountryInitData &a, CountryInitData &b) {
  using ::std::swap;
  swap(a.country_id, b.country_id);
  swap(a.country, b.country);
  swap(a.__isset, b.__isset);
}

const char* ConnectionData::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t ConnectionData::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t ConnectionData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->con_id);
          this->__isset.con_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->player_id);
          this->__isset.player_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConnectionData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ConnectionData");

  xfer += oprot->writeFieldBegin("con_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->con_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->player_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConnectionData &a, ConnectionData &b) {
  using ::std::swap;
  swap(a.con_id, b.con_id);
  swap(a.player_id, b.player_id);
  swap(a.__isset, b.__isset);
}

const char* InitData::ascii_fingerprint = "268CB1E6D8E6FE89FFD9ECF1A9259D4C";
const uint8_t InitData::binary_fingerprint[16] = {0x26,0x8C,0xB1,0xE6,0xD8,0xE6,0xFE,0x89,0xFF,0xD9,0xEC,0xF1,0xA9,0x25,0x9D,0x4C};

uint32_t InitData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bases.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->bases.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->bases[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->mapWidth);
          this->__isset.mapWidth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->mapHeight);
          this->__isset.mapHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->progressAxis.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->progressAxis.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->progressAxis[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.progressAxis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myCountry.read(iprot);
          this->__isset.myCountry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->othersCountry.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->othersCountry.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += this->othersCountry[_i15].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.othersCountry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InitData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("InitData");

  xfer += oprot->writeFieldBegin("bases", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->bases.size()));
    std::vector<BaseInitData> ::const_iterator _iter16;
    for (_iter16 = this->bases.begin(); _iter16 != this->bases.end(); ++_iter16)
    {
      xfer += (*_iter16).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mapWidth", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->mapWidth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mapHeight", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->mapHeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("progressAxis", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->progressAxis.size()));
    std::vector<ProgressAxisInitData> ::const_iterator _iter17;
    for (_iter17 = this->progressAxis.begin(); _iter17 != this->progressAxis.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myCountry", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->myCountry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("othersCountry", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->othersCountry.size()));
    std::vector<CountryInitData> ::const_iterator _iter18;
    for (_iter18 = this->othersCountry.begin(); _iter18 != this->othersCountry.end(); ++_iter18)
    {
      xfer += (*_iter18).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InitData &a, InitData &b) {
  using ::std::swap;
  swap(a.bases, b.bases);
  swap(a.mapWidth, b.mapWidth);
  swap(a.mapHeight, b.mapHeight);
  swap(a.progressAxis, b.progressAxis);
  swap(a.myCountry, b.myCountry);
  swap(a.othersCountry, b.othersCountry);
  swap(a.__isset, b.__isset);
}

const char* Data::ascii_fingerprint = "12027EB62B39ADACBED5A52FF0A12F34";
const uint8_t Data::binary_fingerprint[16] = {0x12,0x02,0x7E,0xB6,0x2B,0x39,0xAD,0xAC,0xBE,0xD5,0xA5,0x2F,0xF0,0xA1,0x2F,0x34};

uint32_t Data::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numFrame);
          this->__isset.numFrame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->owned_planes.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->owned_planes.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += this->owned_planes[_i23].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.owned_planes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->not_owned_planes.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->not_owned_planes.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->not_owned_planes[_i28].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.not_owned_planes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->owned_bases.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readListBegin(_etype32, _size29);
            this->owned_bases.resize(_size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              xfer += this->owned_bases[_i33].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.owned_bases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->not_owned_visible_bases.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->not_owned_visible_bases.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += this->not_owned_visible_bases[_i38].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.not_owned_visible_bases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->not_owned_not_visible_bases.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->not_owned_not_visible_bases.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += this->not_owned_not_visible_bases[_i43].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.not_owned_not_visible_bases = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->progressAxis.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _etype47;
            xfer += iprot->readListBegin(_etype47, _size44);
            this->progressAxis.resize(_size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              xfer += this->progressAxis[_i48].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.progressAxis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->productionLine.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->productionLine.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += this->productionLine[_i53].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.productionLine = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Data::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Data");

  xfer += oprot->writeFieldBegin("numFrame", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->numFrame);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owned_planes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->owned_planes.size()));
    std::vector<PlaneFullData> ::const_iterator _iter54;
    for (_iter54 = this->owned_planes.begin(); _iter54 != this->owned_planes.end(); ++_iter54)
    {
      xfer += (*_iter54).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("not_owned_planes", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->not_owned_planes.size()));
    std::vector<PlaneBasicData> ::const_iterator _iter55;
    for (_iter55 = this->not_owned_planes.begin(); _iter55 != this->not_owned_planes.end(); ++_iter55)
    {
      xfer += (*_iter55).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owned_bases", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->owned_bases.size()));
    std::vector<BaseFullData> ::const_iterator _iter56;
    for (_iter56 = this->owned_bases.begin(); _iter56 != this->owned_bases.end(); ++_iter56)
    {
      xfer += (*_iter56).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("not_owned_visible_bases", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->not_owned_visible_bases.size()));
    std::vector<BaseFullData> ::const_iterator _iter57;
    for (_iter57 = this->not_owned_visible_bases.begin(); _iter57 != this->not_owned_visible_bases.end(); ++_iter57)
    {
      xfer += (*_iter57).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("not_owned_not_visible_bases", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->not_owned_not_visible_bases.size()));
    std::vector<BaseBasicData> ::const_iterator _iter58;
    for (_iter58 = this->not_owned_not_visible_bases.begin(); _iter58 != this->not_owned_not_visible_bases.end(); ++_iter58)
    {
      xfer += (*_iter58).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("progressAxis", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->progressAxis.size()));
    std::vector<ProgressAxisData> ::const_iterator _iter59;
    for (_iter59 = this->progressAxis.begin(); _iter59 != this->progressAxis.end(); ++_iter59)
    {
      xfer += (*_iter59).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productionLine", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->productionLine.size()));
    std::vector<RequestData> ::const_iterator _iter60;
    for (_iter60 = this->productionLine.begin(); _iter60 != this->productionLine.end(); ++_iter60)
    {
      xfer += (*_iter60).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Data &a, Data &b) {
  using ::std::swap;
  swap(a.numFrame, b.numFrame);
  swap(a.owned_planes, b.owned_planes);
  swap(a.not_owned_planes, b.not_owned_planes);
  swap(a.owned_bases, b.owned_bases);
  swap(a.not_owned_visible_bases, b.not_owned_visible_bases);
  swap(a.not_owned_not_visible_bases, b.not_owned_not_visible_bases);
  swap(a.progressAxis, b.progressAxis);
  swap(a.productionLine, b.productionLine);
  swap(a.__isset, b.__isset);
}

const char* CommandData::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t CommandData::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t CommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numFrame);
          this->__isset.numFrame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CommandData");

  xfer += oprot->writeFieldBegin("numFrame", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->numFrame);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommandData &a, CommandData &b) {
  using ::std::swap;
  swap(a.numFrame, b.numFrame);
  swap(a.__isset, b.__isset);
}

const char* PlaneCommandData::ascii_fingerprint = "D0FAA1C578D9EE0F5675D0970870A6F4";
const uint8_t PlaneCommandData::binary_fingerprint[16] = {0xD0,0xFA,0xA1,0xC5,0x78,0xD9,0xEE,0x0F,0x56,0x75,0xD0,0x97,0x08,0x70,0xA6,0xF4};

uint32_t PlaneCommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->c.read(iprot);
          this->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idPlane);
          this->__isset.idPlane = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlaneCommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlaneCommandData");

  xfer += oprot->writeFieldBegin("c", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->c.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idPlane", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->idPlane);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlaneCommandData &a, PlaneCommandData &b) {
  using ::std::swap;
  swap(a.c, b.c);
  swap(a.idPlane, b.idPlane);
  swap(a.__isset, b.__isset);
}

const char* MoveCommandData::ascii_fingerprint = "3253693EB96510567547CB77414A6F08";
const uint8_t MoveCommandData::binary_fingerprint[16] = {0x32,0x53,0x69,0x3E,0xB9,0x65,0x10,0x56,0x75,0x47,0xCB,0x77,0x41,0x4A,0x6F,0x08};

uint32_t MoveCommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pc.read(iprot);
          this->__isset.pc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->posDest.read(iprot);
          this->__isset.posDest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MoveCommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MoveCommandData");

  xfer += oprot->writeFieldBegin("pc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->pc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("posDest", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->posDest.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MoveCommandData &a, MoveCommandData &b) {
  using ::std::swap;
  swap(a.pc, b.pc);
  swap(a.posDest, b.posDest);
  swap(a.__isset, b.__isset);
}

const char* WaitCommandData::ascii_fingerprint = "6FA25D4DBD2927347B29B92A2B65F0B0";
const uint8_t WaitCommandData::binary_fingerprint[16] = {0x6F,0xA2,0x5D,0x4D,0xBD,0x29,0x27,0x34,0x7B,0x29,0xB9,0x2A,0x2B,0x65,0xF0,0xB0};

uint32_t WaitCommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pc.read(iprot);
          this->__isset.pc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WaitCommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("WaitCommandData");

  xfer += oprot->writeFieldBegin("pc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->pc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WaitCommandData &a, WaitCommandData &b) {
  using ::std::swap;
  swap(a.pc, b.pc);
  swap(a.__isset, b.__isset);
}

const char* LandCommandData::ascii_fingerprint = "5A1269BD435B40B9C816A4EDF08AFCD7";
const uint8_t LandCommandData::binary_fingerprint[16] = {0x5A,0x12,0x69,0xBD,0x43,0x5B,0x40,0xB9,0xC8,0x16,0xA4,0xED,0xF0,0x8A,0xFC,0xD7};

uint32_t LandCommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pc.read(iprot);
          this->__isset.pc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idBase);
          this->__isset.idBase = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LandCommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LandCommandData");

  xfer += oprot->writeFieldBegin("pc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->pc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idBase", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->idBase);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LandCommandData &a, LandCommandData &b) {
  using ::std::swap;
  swap(a.pc, b.pc);
  swap(a.idBase, b.idBase);
  swap(a.__isset, b.__isset);
}

const char* AttackCommandData::ascii_fingerprint = "5A1269BD435B40B9C816A4EDF08AFCD7";
const uint8_t AttackCommandData::binary_fingerprint[16] = {0x5A,0x12,0x69,0xBD,0x43,0x5B,0x40,0xB9,0xC8,0x16,0xA4,0xED,0xF0,0x8A,0xFC,0xD7};

uint32_t AttackCommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pc.read(iprot);
          this->__isset.pc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idTarget);
          this->__isset.idTarget = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AttackCommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AttackCommandData");

  xfer += oprot->writeFieldBegin("pc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->pc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idTarget", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->idTarget);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AttackCommandData &a, AttackCommandData &b) {
  using ::std::swap;
  swap(a.pc, b.pc);
  swap(a.idTarget, b.idTarget);
  swap(a.__isset, b.__isset);
}

const char* FollowCommandData::ascii_fingerprint = "5A1269BD435B40B9C816A4EDF08AFCD7";
const uint8_t FollowCommandData::binary_fingerprint[16] = {0x5A,0x12,0x69,0xBD,0x43,0x5B,0x40,0xB9,0xC8,0x16,0xA4,0xED,0xF0,0x8A,0xFC,0xD7};

uint32_t FollowCommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pc.read(iprot);
          this->__isset.pc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idTarget);
          this->__isset.idTarget = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FollowCommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FollowCommandData");

  xfer += oprot->writeFieldBegin("pc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->pc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idTarget", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->idTarget);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FollowCommandData &a, FollowCommandData &b) {
  using ::std::swap;
  swap(a.pc, b.pc);
  swap(a.idTarget, b.idTarget);
  swap(a.__isset, b.__isset);
}

const char* DropMilitarsCommandData::ascii_fingerprint = "D908CD2E60C2FB63A49B942FC0C95128";
const uint8_t DropMilitarsCommandData::binary_fingerprint[16] = {0xD9,0x08,0xCD,0x2E,0x60,0xC2,0xFB,0x63,0xA4,0x9B,0x94,0x2F,0xC0,0xC9,0x51,0x28};

uint32_t DropMilitarsCommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pc.read(iprot);
          this->__isset.pc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->base_id);
          this->__isset.base_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->quantity);
          this->__isset.quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropMilitarsCommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DropMilitarsCommandData");

  xfer += oprot->writeFieldBegin("pc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->pc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("base_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->base_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quantity", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropMilitarsCommandData &a, DropMilitarsCommandData &b) {
  using ::std::swap;
  swap(a.pc, b.pc);
  swap(a.base_id, b.base_id);
  swap(a.quantity, b.quantity);
  swap(a.__isset, b.__isset);
}

const char* StoreFuelCommandData::ascii_fingerprint = "0206DCA4AC6CC7B34C45FD3DC4AFADC6";
const uint8_t StoreFuelCommandData::binary_fingerprint[16] = {0x02,0x06,0xDC,0xA4,0xAC,0x6C,0xC7,0xB3,0x4C,0x45,0xFD,0x3D,0xC4,0xAF,0xAD,0xC6};

uint32_t StoreFuelCommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pc.read(iprot);
          this->__isset.pc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->quantity);
          this->__isset.quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StoreFuelCommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoreFuelCommandData");

  xfer += oprot->writeFieldBegin("pc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->pc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quantity", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoreFuelCommandData &a, StoreFuelCommandData &b) {
  using ::std::swap;
  swap(a.pc, b.pc);
  swap(a.quantity, b.quantity);
  swap(a.__isset, b.__isset);
}

const char* FillFuelTankCommandData::ascii_fingerprint = "0206DCA4AC6CC7B34C45FD3DC4AFADC6";
const uint8_t FillFuelTankCommandData::binary_fingerprint[16] = {0x02,0x06,0xDC,0xA4,0xAC,0x6C,0xC7,0xB3,0x4C,0x45,0xFD,0x3D,0xC4,0xAF,0xAD,0xC6};

uint32_t FillFuelTankCommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pc.read(iprot);
          this->__isset.pc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->quantity);
          this->__isset.quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FillFuelTankCommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FillFuelTankCommandData");

  xfer += oprot->writeFieldBegin("pc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->pc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quantity", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FillFuelTankCommandData &a, FillFuelTankCommandData &b) {
  using ::std::swap;
  swap(a.pc, b.pc);
  swap(a.quantity, b.quantity);
  swap(a.__isset, b.__isset);
}

const char* LoadResourcesCommandData::ascii_fingerprint = "EC9C26E2AF76AE92116BE6A800A539F7";
const uint8_t LoadResourcesCommandData::binary_fingerprint[16] = {0xEC,0x9C,0x26,0xE2,0xAF,0x76,0xAE,0x92,0x11,0x6B,0xE6,0xA8,0x00,0xA5,0x39,0xF7};

uint32_t LoadResourcesCommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pc.read(iprot);
          this->__isset.pc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->militar_quantity);
          this->__isset.militar_quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fuel_quantity);
          this->__isset.fuel_quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LoadResourcesCommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LoadResourcesCommandData");

  xfer += oprot->writeFieldBegin("pc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->pc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("militar_quantity", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->militar_quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fuel_quantity", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->fuel_quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LoadResourcesCommandData &a, LoadResourcesCommandData &b) {
  using ::std::swap;
  swap(a.pc, b.pc);
  swap(a.militar_quantity, b.militar_quantity);
  swap(a.fuel_quantity, b.fuel_quantity);
  swap(a.__isset, b.__isset);
}

const char* BuildPlaneCommandData::ascii_fingerprint = "D0FAA1C578D9EE0F5675D0970870A6F4";
const uint8_t BuildPlaneCommandData::binary_fingerprint[16] = {0xD0,0xFA,0xA1,0xC5,0x78,0xD9,0xEE,0x0F,0x56,0x75,0xD0,0x97,0x08,0x70,0xA6,0xF4};

uint32_t BuildPlaneCommandData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->c.read(iprot);
          this->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->planeTypeId);
          this->__isset.planeTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BuildPlaneCommandData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BuildPlaneCommandData");

  xfer += oprot->writeFieldBegin("c", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->c.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("planeTypeId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->planeTypeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuildPlaneCommandData &a, BuildPlaneCommandData &b) {
  using ::std::swap;
  swap(a.c, b.c);
  swap(a.planeTypeId, b.planeTypeId);
  swap(a.__isset, b.__isset);
}

const char* Response::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Response::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Response");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Response &a, Response &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

} // namespace
