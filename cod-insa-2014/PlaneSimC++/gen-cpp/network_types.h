/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef network_TYPES_H
#define network_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace genbridge {

struct PlaneStateData {
  enum type {
    IDLE = 1,
    GOING_TO = 2,
    FOLLOWING = 3,
    ATTACKING = 4,
    LANDING = 5,
    AT_AIRPORT = 6,
    DEAD = 7
  };
};

extern const std::map<int, const char*> _PlaneStateData_VALUES_TO_NAMES;

/* typedef int32_t int; */

typedef struct _CoordData__isset {
  _CoordData__isset() : x(false), y(false) {}
  bool x;
  bool y;
} _CoordData__isset;

class CoordData {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  CoordData() : x(0), y(0) {
  }

  virtual ~CoordData() throw() {}

  double x;
  double y;

  _CoordData__isset __isset;

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  bool operator == (const CoordData & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const CoordData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoordData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CoordData &a, CoordData &b);

typedef struct _PlaneBasicData__isset {
  _PlaneBasicData__isset() : plane_id(false), posit(false), ai_id(false), health(false), canAttack(false), planeTypeId(false) {}
  bool plane_id;
  bool posit;
  bool ai_id;
  bool health;
  bool canAttack;
  bool planeTypeId;
} _PlaneBasicData__isset;

class PlaneBasicData {
 public:

  static const char* ascii_fingerprint; // = "88554EAF7F3E53DC9585068E16F80AEB";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0x55,0x4E,0xAF,0x7F,0x3E,0x53,0xDC,0x95,0x85,0x06,0x8E,0x16,0xF8,0x0A,0xEB};

  PlaneBasicData() : plane_id(0), ai_id(0), health(0), canAttack(0), planeTypeId(0) {
  }

  virtual ~PlaneBasicData() throw() {}

  int plane_id;
  CoordData posit;
  int ai_id;
  double health;
  bool canAttack;
  int planeTypeId;

  _PlaneBasicData__isset __isset;

  void __set_plane_id(const int val) {
    plane_id = val;
  }

  void __set_posit(const CoordData& val) {
    posit = val;
  }

  void __set_ai_id(const int val) {
    ai_id = val;
  }

  void __set_health(const double val) {
    health = val;
  }

  void __set_canAttack(const bool val) {
    canAttack = val;
  }

  void __set_planeTypeId(const int val) {
    planeTypeId = val;
  }

  bool operator == (const PlaneBasicData & rhs) const
  {
    if (!(plane_id == rhs.plane_id))
      return false;
    if (!(posit == rhs.posit))
      return false;
    if (!(ai_id == rhs.ai_id))
      return false;
    if (!(health == rhs.health))
      return false;
    if (!(canAttack == rhs.canAttack))
      return false;
    if (!(planeTypeId == rhs.planeTypeId))
      return false;
    return true;
  }
  bool operator != (const PlaneBasicData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaneBasicData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlaneBasicData &a, PlaneBasicData &b);

typedef struct _PlaneFullData__isset {
  _PlaneFullData__isset() : basic_info(false), base_id(false), remainingGaz(false), state(false), militarResourceCarried(false), fuelResourceCarried(false) {}
  bool basic_info;
  bool base_id;
  bool remainingGaz;
  bool state;
  bool militarResourceCarried;
  bool fuelResourceCarried;
} _PlaneFullData__isset;

class PlaneFullData {
 public:

  static const char* ascii_fingerprint; // = "9C989AE7A851719E7A820EEA5E0FC4E7";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x98,0x9A,0xE7,0xA8,0x51,0x71,0x9E,0x7A,0x82,0x0E,0xEA,0x5E,0x0F,0xC4,0xE7};

  PlaneFullData() : base_id(0), remainingGaz(0), state((PlaneStateData::type)0), militarResourceCarried(0), fuelResourceCarried(0) {
  }

  virtual ~PlaneFullData() throw() {}

  PlaneBasicData basic_info;
  int base_id;
  double remainingGaz;
  PlaneStateData::type state;
  double militarResourceCarried;
  double fuelResourceCarried;

  _PlaneFullData__isset __isset;

  void __set_basic_info(const PlaneBasicData& val) {
    basic_info = val;
  }

  void __set_base_id(const int val) {
    base_id = val;
  }

  void __set_remainingGaz(const double val) {
    remainingGaz = val;
  }

  void __set_state(const PlaneStateData::type val) {
    state = val;
  }

  void __set_militarResourceCarried(const double val) {
    militarResourceCarried = val;
  }

  void __set_fuelResourceCarried(const double val) {
    fuelResourceCarried = val;
  }

  bool operator == (const PlaneFullData & rhs) const
  {
    if (!(basic_info == rhs.basic_info))
      return false;
    if (!(base_id == rhs.base_id))
      return false;
    if (!(remainingGaz == rhs.remainingGaz))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(militarResourceCarried == rhs.militarResourceCarried))
      return false;
    if (!(fuelResourceCarried == rhs.fuelResourceCarried))
      return false;
    return true;
  }
  bool operator != (const PlaneFullData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaneFullData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlaneFullData &a, PlaneFullData &b);

typedef struct _BaseBasicData__isset {
  _BaseBasicData__isset() : base_id(false), ai_id(false) {}
  bool base_id;
  bool ai_id;
} _BaseBasicData__isset;

class BaseBasicData {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  BaseBasicData() : base_id(0), ai_id(0) {
  }

  virtual ~BaseBasicData() throw() {}

  int base_id;
  int ai_id;

  _BaseBasicData__isset __isset;

  void __set_base_id(const int val) {
    base_id = val;
  }

  void __set_ai_id(const int val) {
    ai_id = val;
  }

  bool operator == (const BaseBasicData & rhs) const
  {
    if (!(base_id == rhs.base_id))
      return false;
    if (!(ai_id == rhs.ai_id))
      return false;
    return true;
  }
  bool operator != (const BaseBasicData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseBasicData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BaseBasicData &a, BaseBasicData &b);

typedef struct _BaseFullData__isset {
  _BaseFullData__isset() : basic_info(false), militarRessource(false), fuelRessource(false) {}
  bool basic_info;
  bool militarRessource;
  bool fuelRessource;
} _BaseFullData__isset;

class BaseFullData {
 public:

  static const char* ascii_fingerprint; // = "DD08CF4C244DC7C60DE5BBFE559F6357";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x08,0xCF,0x4C,0x24,0x4D,0xC7,0xC6,0x0D,0xE5,0xBB,0xFE,0x55,0x9F,0x63,0x57};

  BaseFullData() : militarRessource(0), fuelRessource(0) {
  }

  virtual ~BaseFullData() throw() {}

  BaseBasicData basic_info;
  double militarRessource;
  double fuelRessource;

  _BaseFullData__isset __isset;

  void __set_basic_info(const BaseBasicData& val) {
    basic_info = val;
  }

  void __set_militarRessource(const double val) {
    militarRessource = val;
  }

  void __set_fuelRessource(const double val) {
    fuelRessource = val;
  }

  bool operator == (const BaseFullData & rhs) const
  {
    if (!(basic_info == rhs.basic_info))
      return false;
    if (!(militarRessource == rhs.militarRessource))
      return false;
    if (!(fuelRessource == rhs.fuelRessource))
      return false;
    return true;
  }
  bool operator != (const BaseFullData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseFullData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BaseFullData &a, BaseFullData &b);

typedef struct _BaseInitData__isset {
  _BaseInitData__isset() : base_id(false), posit(false) {}
  bool base_id;
  bool posit;
} _BaseInitData__isset;

class BaseInitData {
 public:

  static const char* ascii_fingerprint; // = "E25EF828A39BA6FAA7D1E497A45B056E";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0x5E,0xF8,0x28,0xA3,0x9B,0xA6,0xFA,0xA7,0xD1,0xE4,0x97,0xA4,0x5B,0x05,0x6E};

  BaseInitData() : base_id(0) {
  }

  virtual ~BaseInitData() throw() {}

  int base_id;
  CoordData posit;

  _BaseInitData__isset __isset;

  void __set_base_id(const int val) {
    base_id = val;
  }

  void __set_posit(const CoordData& val) {
    posit = val;
  }

  bool operator == (const BaseInitData & rhs) const
  {
    if (!(base_id == rhs.base_id))
      return false;
    if (!(posit == rhs.posit))
      return false;
    return true;
  }
  bool operator != (const BaseInitData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseInitData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BaseInitData &a, BaseInitData &b);

typedef struct _ProgressAxisInitData__isset {
  _ProgressAxisInitData__isset() : id(false), base1_id(false), base2_id(false) {}
  bool id;
  bool base1_id;
  bool base2_id;
} _ProgressAxisInitData__isset;

class ProgressAxisInitData {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  ProgressAxisInitData() : id(0), base1_id(0), base2_id(0) {
  }

  virtual ~ProgressAxisInitData() throw() {}

  int id;
  int base1_id;
  int base2_id;

  _ProgressAxisInitData__isset __isset;

  void __set_id(const int val) {
    id = val;
  }

  void __set_base1_id(const int val) {
    base1_id = val;
  }

  void __set_base2_id(const int val) {
    base2_id = val;
  }

  bool operator == (const ProgressAxisInitData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(base1_id == rhs.base1_id))
      return false;
    if (!(base2_id == rhs.base2_id))
      return false;
    return true;
  }
  bool operator != (const ProgressAxisInitData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProgressAxisInitData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProgressAxisInitData &a, ProgressAxisInitData &b);

typedef struct _ProgressAxisData__isset {
  _ProgressAxisData__isset() : id(false), progressBase1(false), progressBase2(false) {}
  bool id;
  bool progressBase1;
  bool progressBase2;
} _ProgressAxisData__isset;

class ProgressAxisData {
 public:

  static const char* ascii_fingerprint; // = "06343684351EE9E5FC9AF57369AE1D80";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x34,0x36,0x84,0x35,0x1E,0xE9,0xE5,0xFC,0x9A,0xF5,0x73,0x69,0xAE,0x1D,0x80};

  ProgressAxisData() : id(0), progressBase1(0), progressBase2(0) {
  }

  virtual ~ProgressAxisData() throw() {}

  int id;
  double progressBase1;
  double progressBase2;

  _ProgressAxisData__isset __isset;

  void __set_id(const int val) {
    id = val;
  }

  void __set_progressBase1(const double val) {
    progressBase1 = val;
  }

  void __set_progressBase2(const double val) {
    progressBase2 = val;
  }

  bool operator == (const ProgressAxisData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(progressBase1 == rhs.progressBase1))
      return false;
    if (!(progressBase2 == rhs.progressBase2))
      return false;
    return true;
  }
  bool operator != (const ProgressAxisData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProgressAxisData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProgressAxisData &a, ProgressAxisData &b);

typedef struct _RequestData__isset {
  _RequestData__isset() : requestId(false), timeBeforePlaneBuilt(false), planeTypeId(false) {}
  bool requestId;
  bool timeBeforePlaneBuilt;
  bool planeTypeId;
} _RequestData__isset;

class RequestData {
 public:

  static const char* ascii_fingerprint; // = "31A8CF7803D4BBC35C8F22A1C921D0F9";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0xA8,0xCF,0x78,0x03,0xD4,0xBB,0xC3,0x5C,0x8F,0x22,0xA1,0xC9,0x21,0xD0,0xF9};

  RequestData() : requestId(0), timeBeforePlaneBuilt(0), planeTypeId(0) {
  }

  virtual ~RequestData() throw() {}

  int requestId;
  double timeBeforePlaneBuilt;
  int planeTypeId;

  _RequestData__isset __isset;

  void __set_requestId(const int val) {
    requestId = val;
  }

  void __set_timeBeforePlaneBuilt(const double val) {
    timeBeforePlaneBuilt = val;
  }

  void __set_planeTypeId(const int val) {
    planeTypeId = val;
  }

  bool operator == (const RequestData & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(timeBeforePlaneBuilt == rhs.timeBeforePlaneBuilt))
      return false;
    if (!(planeTypeId == rhs.planeTypeId))
      return false;
    return true;
  }
  bool operator != (const RequestData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestData &a, RequestData &b);

typedef struct _CountryInitData__isset {
  _CountryInitData__isset() : country_id(false), country(false) {}
  bool country_id;
  bool country;
} _CountryInitData__isset;

class CountryInitData {
 public:

  static const char* ascii_fingerprint; // = "E25EF828A39BA6FAA7D1E497A45B056E";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0x5E,0xF8,0x28,0xA3,0x9B,0xA6,0xFA,0xA7,0xD1,0xE4,0x97,0xA4,0x5B,0x05,0x6E};

  CountryInitData() : country_id(0) {
  }

  virtual ~CountryInitData() throw() {}

  int country_id;
  CoordData country;

  _CountryInitData__isset __isset;

  void __set_country_id(const int val) {
    country_id = val;
  }

  void __set_country(const CoordData& val) {
    country = val;
  }

  bool operator == (const CountryInitData & rhs) const
  {
    if (!(country_id == rhs.country_id))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const CountryInitData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CountryInitData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CountryInitData &a, CountryInitData &b);

typedef struct _ConnectionData__isset {
  _ConnectionData__isset() : con_id(false), player_id(false) {}
  bool con_id;
  bool player_id;
} _ConnectionData__isset;

class ConnectionData {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  ConnectionData() : con_id(0), player_id(0) {
  }

  virtual ~ConnectionData() throw() {}

  int con_id;
  int player_id;

  _ConnectionData__isset __isset;

  void __set_con_id(const int val) {
    con_id = val;
  }

  void __set_player_id(const int val) {
    player_id = val;
  }

  bool operator == (const ConnectionData & rhs) const
  {
    if (!(con_id == rhs.con_id))
      return false;
    if (!(player_id == rhs.player_id))
      return false;
    return true;
  }
  bool operator != (const ConnectionData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConnectionData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConnectionData &a, ConnectionData &b);

typedef struct _InitData__isset {
  _InitData__isset() : bases(false), mapWidth(false), mapHeight(false), progressAxis(false), myCountry(false), othersCountry(false) {}
  bool bases;
  bool mapWidth;
  bool mapHeight;
  bool progressAxis;
  bool myCountry;
  bool othersCountry;
} _InitData__isset;

class InitData {
 public:

  static const char* ascii_fingerprint; // = "268CB1E6D8E6FE89FFD9ECF1A9259D4C";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x8C,0xB1,0xE6,0xD8,0xE6,0xFE,0x89,0xFF,0xD9,0xEC,0xF1,0xA9,0x25,0x9D,0x4C};

  InitData() : mapWidth(0), mapHeight(0) {
  }

  virtual ~InitData() throw() {}

  std::vector<BaseInitData>  bases;
  double mapWidth;
  double mapHeight;
  std::vector<ProgressAxisInitData>  progressAxis;
  CountryInitData myCountry;
  std::vector<CountryInitData>  othersCountry;

  _InitData__isset __isset;

  void __set_bases(const std::vector<BaseInitData> & val) {
    bases = val;
  }

  void __set_mapWidth(const double val) {
    mapWidth = val;
  }

  void __set_mapHeight(const double val) {
    mapHeight = val;
  }

  void __set_progressAxis(const std::vector<ProgressAxisInitData> & val) {
    progressAxis = val;
  }

  void __set_myCountry(const CountryInitData& val) {
    myCountry = val;
  }

  void __set_othersCountry(const std::vector<CountryInitData> & val) {
    othersCountry = val;
  }

  bool operator == (const InitData & rhs) const
  {
    if (!(bases == rhs.bases))
      return false;
    if (!(mapWidth == rhs.mapWidth))
      return false;
    if (!(mapHeight == rhs.mapHeight))
      return false;
    if (!(progressAxis == rhs.progressAxis))
      return false;
    if (!(myCountry == rhs.myCountry))
      return false;
    if (!(othersCountry == rhs.othersCountry))
      return false;
    return true;
  }
  bool operator != (const InitData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InitData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InitData &a, InitData &b);

typedef struct _Data__isset {
  _Data__isset() : numFrame(false), owned_planes(false), not_owned_planes(false), owned_bases(false), not_owned_visible_bases(false), not_owned_not_visible_bases(false), progressAxis(false), productionLine(false) {}
  bool numFrame;
  bool owned_planes;
  bool not_owned_planes;
  bool owned_bases;
  bool not_owned_visible_bases;
  bool not_owned_not_visible_bases;
  bool progressAxis;
  bool productionLine;
} _Data__isset;

class Data {
 public:

  static const char* ascii_fingerprint; // = "12027EB62B39ADACBED5A52FF0A12F34";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0x02,0x7E,0xB6,0x2B,0x39,0xAD,0xAC,0xBE,0xD5,0xA5,0x2F,0xF0,0xA1,0x2F,0x34};

  Data() : numFrame(0) {
  }

  virtual ~Data() throw() {}

  int numFrame;
  std::vector<PlaneFullData>  owned_planes;
  std::vector<PlaneBasicData>  not_owned_planes;
  std::vector<BaseFullData>  owned_bases;
  std::vector<BaseFullData>  not_owned_visible_bases;
  std::vector<BaseBasicData>  not_owned_not_visible_bases;
  std::vector<ProgressAxisData>  progressAxis;
  std::vector<RequestData>  productionLine;

  _Data__isset __isset;

  void __set_numFrame(const int val) {
    numFrame = val;
  }

  void __set_owned_planes(const std::vector<PlaneFullData> & val) {
    owned_planes = val;
  }

  void __set_not_owned_planes(const std::vector<PlaneBasicData> & val) {
    not_owned_planes = val;
  }

  void __set_owned_bases(const std::vector<BaseFullData> & val) {
    owned_bases = val;
  }

  void __set_not_owned_visible_bases(const std::vector<BaseFullData> & val) {
    not_owned_visible_bases = val;
  }

  void __set_not_owned_not_visible_bases(const std::vector<BaseBasicData> & val) {
    not_owned_not_visible_bases = val;
  }

  void __set_progressAxis(const std::vector<ProgressAxisData> & val) {
    progressAxis = val;
  }

  void __set_productionLine(const std::vector<RequestData> & val) {
    productionLine = val;
  }

  bool operator == (const Data & rhs) const
  {
    if (!(numFrame == rhs.numFrame))
      return false;
    if (!(owned_planes == rhs.owned_planes))
      return false;
    if (!(not_owned_planes == rhs.not_owned_planes))
      return false;
    if (!(owned_bases == rhs.owned_bases))
      return false;
    if (!(not_owned_visible_bases == rhs.not_owned_visible_bases))
      return false;
    if (!(not_owned_not_visible_bases == rhs.not_owned_not_visible_bases))
      return false;
    if (!(progressAxis == rhs.progressAxis))
      return false;
    if (!(productionLine == rhs.productionLine))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Data &a, Data &b);

typedef struct _CommandData__isset {
  _CommandData__isset() : numFrame(false) {}
  bool numFrame;
} _CommandData__isset;

class CommandData {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  CommandData() : numFrame(0) {
  }

  virtual ~CommandData() throw() {}

  int numFrame;

  _CommandData__isset __isset;

  void __set_numFrame(const int val) {
    numFrame = val;
  }

  bool operator == (const CommandData & rhs) const
  {
    if (!(numFrame == rhs.numFrame))
      return false;
    return true;
  }
  bool operator != (const CommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommandData &a, CommandData &b);

typedef struct _PlaneCommandData__isset {
  _PlaneCommandData__isset() : c(false), idPlane(false) {}
  bool c;
  bool idPlane;
} _PlaneCommandData__isset;

class PlaneCommandData {
 public:

  static const char* ascii_fingerprint; // = "D0FAA1C578D9EE0F5675D0970870A6F4";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0xFA,0xA1,0xC5,0x78,0xD9,0xEE,0x0F,0x56,0x75,0xD0,0x97,0x08,0x70,0xA6,0xF4};

  PlaneCommandData() : idPlane(0) {
  }

  virtual ~PlaneCommandData() throw() {}

  CommandData c;
  int idPlane;

  _PlaneCommandData__isset __isset;

  void __set_c(const CommandData& val) {
    c = val;
  }

  void __set_idPlane(const int val) {
    idPlane = val;
  }

  bool operator == (const PlaneCommandData & rhs) const
  {
    if (!(c == rhs.c))
      return false;
    if (!(idPlane == rhs.idPlane))
      return false;
    return true;
  }
  bool operator != (const PlaneCommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaneCommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlaneCommandData &a, PlaneCommandData &b);

typedef struct _MoveCommandData__isset {
  _MoveCommandData__isset() : pc(false), posDest(false) {}
  bool pc;
  bool posDest;
} _MoveCommandData__isset;

class MoveCommandData {
 public:

  static const char* ascii_fingerprint; // = "3253693EB96510567547CB77414A6F08";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x53,0x69,0x3E,0xB9,0x65,0x10,0x56,0x75,0x47,0xCB,0x77,0x41,0x4A,0x6F,0x08};

  MoveCommandData() {
  }

  virtual ~MoveCommandData() throw() {}

  PlaneCommandData pc;
  CoordData posDest;

  _MoveCommandData__isset __isset;

  void __set_pc(const PlaneCommandData& val) {
    pc = val;
  }

  void __set_posDest(const CoordData& val) {
    posDest = val;
  }

  bool operator == (const MoveCommandData & rhs) const
  {
    if (!(pc == rhs.pc))
      return false;
    if (!(posDest == rhs.posDest))
      return false;
    return true;
  }
  bool operator != (const MoveCommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MoveCommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MoveCommandData &a, MoveCommandData &b);

typedef struct _WaitCommandData__isset {
  _WaitCommandData__isset() : pc(false) {}
  bool pc;
} _WaitCommandData__isset;

class WaitCommandData {
 public:

  static const char* ascii_fingerprint; // = "6FA25D4DBD2927347B29B92A2B65F0B0";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0xA2,0x5D,0x4D,0xBD,0x29,0x27,0x34,0x7B,0x29,0xB9,0x2A,0x2B,0x65,0xF0,0xB0};

  WaitCommandData() {
  }

  virtual ~WaitCommandData() throw() {}

  PlaneCommandData pc;

  _WaitCommandData__isset __isset;

  void __set_pc(const PlaneCommandData& val) {
    pc = val;
  }

  bool operator == (const WaitCommandData & rhs) const
  {
    if (!(pc == rhs.pc))
      return false;
    return true;
  }
  bool operator != (const WaitCommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WaitCommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WaitCommandData &a, WaitCommandData &b);

typedef struct _LandCommandData__isset {
  _LandCommandData__isset() : pc(false), idBase(false) {}
  bool pc;
  bool idBase;
} _LandCommandData__isset;

class LandCommandData {
 public:

  static const char* ascii_fingerprint; // = "5A1269BD435B40B9C816A4EDF08AFCD7";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x12,0x69,0xBD,0x43,0x5B,0x40,0xB9,0xC8,0x16,0xA4,0xED,0xF0,0x8A,0xFC,0xD7};

  LandCommandData() : idBase(0) {
  }

  virtual ~LandCommandData() throw() {}

  PlaneCommandData pc;
  int idBase;

  _LandCommandData__isset __isset;

  void __set_pc(const PlaneCommandData& val) {
    pc = val;
  }

  void __set_idBase(const int val) {
    idBase = val;
  }

  bool operator == (const LandCommandData & rhs) const
  {
    if (!(pc == rhs.pc))
      return false;
    if (!(idBase == rhs.idBase))
      return false;
    return true;
  }
  bool operator != (const LandCommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LandCommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LandCommandData &a, LandCommandData &b);

typedef struct _AttackCommandData__isset {
  _AttackCommandData__isset() : pc(false), idTarget(false) {}
  bool pc;
  bool idTarget;
} _AttackCommandData__isset;

class AttackCommandData {
 public:

  static const char* ascii_fingerprint; // = "5A1269BD435B40B9C816A4EDF08AFCD7";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x12,0x69,0xBD,0x43,0x5B,0x40,0xB9,0xC8,0x16,0xA4,0xED,0xF0,0x8A,0xFC,0xD7};

  AttackCommandData() : idTarget(0) {
  }

  virtual ~AttackCommandData() throw() {}

  PlaneCommandData pc;
  int idTarget;

  _AttackCommandData__isset __isset;

  void __set_pc(const PlaneCommandData& val) {
    pc = val;
  }

  void __set_idTarget(const int val) {
    idTarget = val;
  }

  bool operator == (const AttackCommandData & rhs) const
  {
    if (!(pc == rhs.pc))
      return false;
    if (!(idTarget == rhs.idTarget))
      return false;
    return true;
  }
  bool operator != (const AttackCommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AttackCommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AttackCommandData &a, AttackCommandData &b);

typedef struct _FollowCommandData__isset {
  _FollowCommandData__isset() : pc(false), idTarget(false) {}
  bool pc;
  bool idTarget;
} _FollowCommandData__isset;

class FollowCommandData {
 public:

  static const char* ascii_fingerprint; // = "5A1269BD435B40B9C816A4EDF08AFCD7";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0x12,0x69,0xBD,0x43,0x5B,0x40,0xB9,0xC8,0x16,0xA4,0xED,0xF0,0x8A,0xFC,0xD7};

  FollowCommandData() : idTarget(0) {
  }

  virtual ~FollowCommandData() throw() {}

  PlaneCommandData pc;
  int idTarget;

  _FollowCommandData__isset __isset;

  void __set_pc(const PlaneCommandData& val) {
    pc = val;
  }

  void __set_idTarget(const int val) {
    idTarget = val;
  }

  bool operator == (const FollowCommandData & rhs) const
  {
    if (!(pc == rhs.pc))
      return false;
    if (!(idTarget == rhs.idTarget))
      return false;
    return true;
  }
  bool operator != (const FollowCommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FollowCommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FollowCommandData &a, FollowCommandData &b);

typedef struct _DropMilitarsCommandData__isset {
  _DropMilitarsCommandData__isset() : pc(false), base_id(false), quantity(false) {}
  bool pc;
  bool base_id;
  bool quantity;
} _DropMilitarsCommandData__isset;

class DropMilitarsCommandData {
 public:

  static const char* ascii_fingerprint; // = "D908CD2E60C2FB63A49B942FC0C95128";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0x08,0xCD,0x2E,0x60,0xC2,0xFB,0x63,0xA4,0x9B,0x94,0x2F,0xC0,0xC9,0x51,0x28};

  DropMilitarsCommandData() : base_id(0), quantity(0) {
  }

  virtual ~DropMilitarsCommandData() throw() {}

  PlaneCommandData pc;
  int base_id;
  double quantity;

  _DropMilitarsCommandData__isset __isset;

  void __set_pc(const PlaneCommandData& val) {
    pc = val;
  }

  void __set_base_id(const int val) {
    base_id = val;
  }

  void __set_quantity(const double val) {
    quantity = val;
  }

  bool operator == (const DropMilitarsCommandData & rhs) const
  {
    if (!(pc == rhs.pc))
      return false;
    if (!(base_id == rhs.base_id))
      return false;
    if (!(quantity == rhs.quantity))
      return false;
    return true;
  }
  bool operator != (const DropMilitarsCommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropMilitarsCommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DropMilitarsCommandData &a, DropMilitarsCommandData &b);

typedef struct _StoreFuelCommandData__isset {
  _StoreFuelCommandData__isset() : pc(false), quantity(false) {}
  bool pc;
  bool quantity;
} _StoreFuelCommandData__isset;

class StoreFuelCommandData {
 public:

  static const char* ascii_fingerprint; // = "0206DCA4AC6CC7B34C45FD3DC4AFADC6";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x06,0xDC,0xA4,0xAC,0x6C,0xC7,0xB3,0x4C,0x45,0xFD,0x3D,0xC4,0xAF,0xAD,0xC6};

  StoreFuelCommandData() : quantity(0) {
  }

  virtual ~StoreFuelCommandData() throw() {}

  PlaneCommandData pc;
  double quantity;

  _StoreFuelCommandData__isset __isset;

  void __set_pc(const PlaneCommandData& val) {
    pc = val;
  }

  void __set_quantity(const double val) {
    quantity = val;
  }

  bool operator == (const StoreFuelCommandData & rhs) const
  {
    if (!(pc == rhs.pc))
      return false;
    if (!(quantity == rhs.quantity))
      return false;
    return true;
  }
  bool operator != (const StoreFuelCommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StoreFuelCommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StoreFuelCommandData &a, StoreFuelCommandData &b);

typedef struct _FillFuelTankCommandData__isset {
  _FillFuelTankCommandData__isset() : pc(false), quantity(false) {}
  bool pc;
  bool quantity;
} _FillFuelTankCommandData__isset;

class FillFuelTankCommandData {
 public:

  static const char* ascii_fingerprint; // = "0206DCA4AC6CC7B34C45FD3DC4AFADC6";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x06,0xDC,0xA4,0xAC,0x6C,0xC7,0xB3,0x4C,0x45,0xFD,0x3D,0xC4,0xAF,0xAD,0xC6};

  FillFuelTankCommandData() : quantity(0) {
  }

  virtual ~FillFuelTankCommandData() throw() {}

  PlaneCommandData pc;
  double quantity;

  _FillFuelTankCommandData__isset __isset;

  void __set_pc(const PlaneCommandData& val) {
    pc = val;
  }

  void __set_quantity(const double val) {
    quantity = val;
  }

  bool operator == (const FillFuelTankCommandData & rhs) const
  {
    if (!(pc == rhs.pc))
      return false;
    if (!(quantity == rhs.quantity))
      return false;
    return true;
  }
  bool operator != (const FillFuelTankCommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FillFuelTankCommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FillFuelTankCommandData &a, FillFuelTankCommandData &b);

typedef struct _LoadResourcesCommandData__isset {
  _LoadResourcesCommandData__isset() : pc(false), militar_quantity(false), fuel_quantity(false) {}
  bool pc;
  bool militar_quantity;
  bool fuel_quantity;
} _LoadResourcesCommandData__isset;

class LoadResourcesCommandData {
 public:

  static const char* ascii_fingerprint; // = "EC9C26E2AF76AE92116BE6A800A539F7";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x9C,0x26,0xE2,0xAF,0x76,0xAE,0x92,0x11,0x6B,0xE6,0xA8,0x00,0xA5,0x39,0xF7};

  LoadResourcesCommandData() : militar_quantity(0), fuel_quantity(0) {
  }

  virtual ~LoadResourcesCommandData() throw() {}

  PlaneCommandData pc;
  double militar_quantity;
  double fuel_quantity;

  _LoadResourcesCommandData__isset __isset;

  void __set_pc(const PlaneCommandData& val) {
    pc = val;
  }

  void __set_militar_quantity(const double val) {
    militar_quantity = val;
  }

  void __set_fuel_quantity(const double val) {
    fuel_quantity = val;
  }

  bool operator == (const LoadResourcesCommandData & rhs) const
  {
    if (!(pc == rhs.pc))
      return false;
    if (!(militar_quantity == rhs.militar_quantity))
      return false;
    if (!(fuel_quantity == rhs.fuel_quantity))
      return false;
    return true;
  }
  bool operator != (const LoadResourcesCommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoadResourcesCommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LoadResourcesCommandData &a, LoadResourcesCommandData &b);

typedef struct _BuildPlaneCommandData__isset {
  _BuildPlaneCommandData__isset() : c(false), planeTypeId(false) {}
  bool c;
  bool planeTypeId;
} _BuildPlaneCommandData__isset;

class BuildPlaneCommandData {
 public:

  static const char* ascii_fingerprint; // = "D0FAA1C578D9EE0F5675D0970870A6F4";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0xFA,0xA1,0xC5,0x78,0xD9,0xEE,0x0F,0x56,0x75,0xD0,0x97,0x08,0x70,0xA6,0xF4};

  BuildPlaneCommandData() : planeTypeId(0) {
  }

  virtual ~BuildPlaneCommandData() throw() {}

  CommandData c;
  int planeTypeId;

  _BuildPlaneCommandData__isset __isset;

  void __set_c(const CommandData& val) {
    c = val;
  }

  void __set_planeTypeId(const int val) {
    planeTypeId = val;
  }

  bool operator == (const BuildPlaneCommandData & rhs) const
  {
    if (!(c == rhs.c))
      return false;
    if (!(planeTypeId == rhs.planeTypeId))
      return false;
    return true;
  }
  bool operator != (const BuildPlaneCommandData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuildPlaneCommandData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BuildPlaneCommandData &a, BuildPlaneCommandData &b);

typedef struct _Response__isset {
  _Response__isset() : code(false), message(false) {}
  bool code;
  bool message;
} _Response__isset;

class Response {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Response() : code(0), message() {
  }

  virtual ~Response() throw() {}

  int code;
  std::string message;

  _Response__isset __isset;

  void __set_code(const int val) {
    code = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const Response & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Response &a, Response &b);

} // namespace

#endif
