/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Bridge_H
#define Bridge_H

#include <thrift/TDispatchProcessor.h>
#include "network_types.h"

namespace genbridge {

class BridgeIf {
 public:
  virtual ~BridgeIf() {}
  virtual void connect(ConnectionData& _return, const std::string& nom) = 0;
  virtual void retrieveInitData(InitData& _return, const int idConnection) = 0;
  virtual void retrieveData(Data& _return, const int idConnection) = 0;
};

class BridgeIfFactory {
 public:
  typedef BridgeIf Handler;

  virtual ~BridgeIfFactory() {}

  virtual BridgeIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BridgeIf* /* handler */) = 0;
};

class BridgeIfSingletonFactory : virtual public BridgeIfFactory {
 public:
  BridgeIfSingletonFactory(const boost::shared_ptr<BridgeIf>& iface) : iface_(iface) {}
  virtual ~BridgeIfSingletonFactory() {}

  virtual BridgeIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BridgeIf* /* handler */) {}

 protected:
  boost::shared_ptr<BridgeIf> iface_;
};

class BridgeNull : virtual public BridgeIf {
 public:
  virtual ~BridgeNull() {}
  void connect(ConnectionData& /* _return */, const std::string& /* nom */) {
    return;
  }
  void retrieveInitData(InitData& /* _return */, const int /* idConnection */) {
    return;
  }
  void retrieveData(Data& /* _return */, const int /* idConnection */) {
    return;
  }
};

typedef struct _Bridge_connect_args__isset {
  _Bridge_connect_args__isset() : nom(false) {}
  bool nom;
} _Bridge_connect_args__isset;

class Bridge_connect_args {
 public:

  Bridge_connect_args() : nom() {
  }

  virtual ~Bridge_connect_args() throw() {}

  std::string nom;

  _Bridge_connect_args__isset __isset;

  void __set_nom(const std::string& val) {
    nom = val;
  }

  bool operator == (const Bridge_connect_args & rhs) const
  {
    if (!(nom == rhs.nom))
      return false;
    return true;
  }
  bool operator != (const Bridge_connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bridge_connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Bridge_connect_pargs {
 public:


  virtual ~Bridge_connect_pargs() throw() {}

  const std::string* nom;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Bridge_connect_result__isset {
  _Bridge_connect_result__isset() : success(false) {}
  bool success;
} _Bridge_connect_result__isset;

class Bridge_connect_result {
 public:

  Bridge_connect_result() {
  }

  virtual ~Bridge_connect_result() throw() {}

  ConnectionData success;

  _Bridge_connect_result__isset __isset;

  void __set_success(const ConnectionData& val) {
    success = val;
  }

  bool operator == (const Bridge_connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Bridge_connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bridge_connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Bridge_connect_presult__isset {
  _Bridge_connect_presult__isset() : success(false) {}
  bool success;
} _Bridge_connect_presult__isset;

class Bridge_connect_presult {
 public:


  virtual ~Bridge_connect_presult() throw() {}

  ConnectionData* success;

  _Bridge_connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Bridge_retrieveInitData_args__isset {
  _Bridge_retrieveInitData_args__isset() : idConnection(false) {}
  bool idConnection;
} _Bridge_retrieveInitData_args__isset;

class Bridge_retrieveInitData_args {
 public:

  Bridge_retrieveInitData_args() : idConnection(0) {
  }

  virtual ~Bridge_retrieveInitData_args() throw() {}

  int idConnection;

  _Bridge_retrieveInitData_args__isset __isset;

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const Bridge_retrieveInitData_args & rhs) const
  {
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const Bridge_retrieveInitData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bridge_retrieveInitData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Bridge_retrieveInitData_pargs {
 public:


  virtual ~Bridge_retrieveInitData_pargs() throw() {}

  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Bridge_retrieveInitData_result__isset {
  _Bridge_retrieveInitData_result__isset() : success(false) {}
  bool success;
} _Bridge_retrieveInitData_result__isset;

class Bridge_retrieveInitData_result {
 public:

  Bridge_retrieveInitData_result() {
  }

  virtual ~Bridge_retrieveInitData_result() throw() {}

  InitData success;

  _Bridge_retrieveInitData_result__isset __isset;

  void __set_success(const InitData& val) {
    success = val;
  }

  bool operator == (const Bridge_retrieveInitData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Bridge_retrieveInitData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bridge_retrieveInitData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Bridge_retrieveInitData_presult__isset {
  _Bridge_retrieveInitData_presult__isset() : success(false) {}
  bool success;
} _Bridge_retrieveInitData_presult__isset;

class Bridge_retrieveInitData_presult {
 public:


  virtual ~Bridge_retrieveInitData_presult() throw() {}

  InitData* success;

  _Bridge_retrieveInitData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Bridge_retrieveData_args__isset {
  _Bridge_retrieveData_args__isset() : idConnection(false) {}
  bool idConnection;
} _Bridge_retrieveData_args__isset;

class Bridge_retrieveData_args {
 public:

  Bridge_retrieveData_args() : idConnection(0) {
  }

  virtual ~Bridge_retrieveData_args() throw() {}

  int idConnection;

  _Bridge_retrieveData_args__isset __isset;

  void __set_idConnection(const int val) {
    idConnection = val;
  }

  bool operator == (const Bridge_retrieveData_args & rhs) const
  {
    if (!(idConnection == rhs.idConnection))
      return false;
    return true;
  }
  bool operator != (const Bridge_retrieveData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bridge_retrieveData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Bridge_retrieveData_pargs {
 public:


  virtual ~Bridge_retrieveData_pargs() throw() {}

  const int* idConnection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Bridge_retrieveData_result__isset {
  _Bridge_retrieveData_result__isset() : success(false) {}
  bool success;
} _Bridge_retrieveData_result__isset;

class Bridge_retrieveData_result {
 public:

  Bridge_retrieveData_result() {
  }

  virtual ~Bridge_retrieveData_result() throw() {}

  Data success;

  _Bridge_retrieveData_result__isset __isset;

  void __set_success(const Data& val) {
    success = val;
  }

  bool operator == (const Bridge_retrieveData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Bridge_retrieveData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bridge_retrieveData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Bridge_retrieveData_presult__isset {
  _Bridge_retrieveData_presult__isset() : success(false) {}
  bool success;
} _Bridge_retrieveData_presult__isset;

class Bridge_retrieveData_presult {
 public:


  virtual ~Bridge_retrieveData_presult() throw() {}

  Data* success;

  _Bridge_retrieveData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BridgeClient : virtual public BridgeIf {
 public:
  BridgeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BridgeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void connect(ConnectionData& _return, const std::string& nom);
  void send_connect(const std::string& nom);
  void recv_connect(ConnectionData& _return);
  void retrieveInitData(InitData& _return, const int idConnection);
  void send_retrieveInitData(const int idConnection);
  void recv_retrieveInitData(InitData& _return);
  void retrieveData(Data& _return, const int idConnection);
  void send_retrieveData(const int idConnection);
  void recv_retrieveData(Data& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BridgeProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BridgeIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BridgeProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_retrieveInitData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_retrieveData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BridgeProcessor(boost::shared_ptr<BridgeIf> iface) :
    iface_(iface) {
    processMap_["connect"] = &BridgeProcessor::process_connect;
    processMap_["retrieveInitData"] = &BridgeProcessor::process_retrieveInitData;
    processMap_["retrieveData"] = &BridgeProcessor::process_retrieveData;
  }

  virtual ~BridgeProcessor() {}
};

class BridgeProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BridgeProcessorFactory(const ::boost::shared_ptr< BridgeIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BridgeIfFactory > handlerFactory_;
};

class BridgeMultiface : virtual public BridgeIf {
 public:
  BridgeMultiface(std::vector<boost::shared_ptr<BridgeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BridgeMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BridgeIf> > ifaces_;
  BridgeMultiface() {}
  void add(boost::shared_ptr<BridgeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void connect(ConnectionData& _return, const std::string& nom) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect(_return, nom);
    }
    ifaces_[i]->connect(_return, nom);
    return;
  }

  void retrieveInitData(InitData& _return, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->retrieveInitData(_return, idConnection);
    }
    ifaces_[i]->retrieveInitData(_return, idConnection);
    return;
  }

  void retrieveData(Data& _return, const int idConnection) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->retrieveData(_return, idConnection);
    }
    ifaces_[i]->retrieveData(_return, idConnection);
    return;
  }

};

} // namespace

#endif
